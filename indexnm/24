tools. 
<body> 
class="post-header"> 
minutes 
all 
there 
all 
all 
all 
all 
rm 
all 
are 
are 
are 
are 
all 
are 
all 
all 
all 
there 
are 
are 
are 
are 
all 
rm 
rm 
rm 
there 
are 
rm 
rm 
rm 
Makefiles, 
are 
all 
clean</span> 
rm 
rm 
rm 
are 
are 
clean</span> 
id="goals">Goals</h3> 
class="highlighter-rouge">.h</code> 
let’s 
class="highlighter-rouge">ld</code> 
know 
Thus 
bag.h 
bag.h 
class="highlighter-rouge">.h</code> 
know 
class="nb">ls 
bag.h 
bag.h 
bag.h 
class="highlighter-rouge">ld</code> 
class="nb">ls 
bag.h 
class="nb">ls 
bag.h 
CS50-standard 
parentheses 
line. 
let’s 
class="nb">ls 
bag.h 
class="nb">ls 
bag.h 
library, 
</span> 
what 
what 
know 
class="highlight"><code> 
line. 
what’s 
</span> 
page 
re-usable 
emacs 
ready 
ready 
cleans 
rebuilds 
immediately 
emacs 
cleans 
VALUE 
being 
class="highlighter-rouge">OBJS</code> 
k</code>.</p> 
emacs 
emacs 
emacs 
emacs 
before 
solve 
class="se">\*</span>.o 
class="se">\*</span>.dSYM 
class="nl">deploy</span><span 
<p>Today 
codebase, 
“load”, 
sees 
should 
class="sb">`</span>names<span 
my 
my 
time.</p> 
class="nv">$(CFLAGS)</span> 
target</em>, 
class="nv">$(CFLAGS)</span> 
class="nv">$(CFLAGS)</span> 
<p>Some 
class="highlighter-rouge">-f 
class="nv">$(CFLAGS)</span> 
should 
my 
Palmer 
deploy 
class="nl">build</span><span 
another 
another 
step 
unlike 
even 
colon 
colon 
names.txt 
names.txt 
third 
works 
names.txt 
names.txt 
vary.)</p> 
unlike 
target(s) 
target(s) 
even 
directory 
directory 
names.txt 
names.txt 
class="highlight"><code>... 
step 
even 
arguments. 
directory 
even 
by 
<em>linked 
by 
easily 
by 
assembly 
assembly 
assembly 
by 
(short 
by 
by 
reading 
by 
“touching” 
To 
by 
by 
class="nl">.PHONY</span><span 
symbol 
by 
class="nl">.PHONY</span><span 
by 
class="o">=</span>/Labs/future 
class="nl">.PHONY</span><span 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
by 
Campbell, 
href="/engs50/50.png" 
defined 
names.c 
executes 
<p>However, 
names.c 
names.c 
libraries... 
names.c 
dependencies.)</p> 
line(s) 
class="err">-c</span> 
class="err">-c</span> 
class="err">-c</span> 
names.c 
names.c 
names.c 
names.c 
known 
names.c 
names.c 
names.c 
“macros” 
known 
names.c 
<p>We’ve 
removed. 
names.c 
names.c 
defined 
<p><code 
<p><code 
<p><code 
<p><code 
<p><code 
<p><code 
<p><code 
class="o">=</span>/Comics/future 
user 
user 
In 
[<a 
href="/engs50/Labs/">Labs</a>] 
[<a 
[<a 
[<a 
[<a 
<li><code 
<li><code 
<li><code 
In 
words, 
Finally, 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
given 
In 
class="c"># 
class="c"># 
details, 
however. 
value 
class="c"># 
class="c"># 
given 
In 
In 
taught 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="c"># 
class="c"># 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="c"># 
class="c"># 
them.</p> 
“oldie 
involving 
class="c"># 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="c"># 
class="o">=</span> 
class="c"># 
class="c"># 
class="c"># 
class="nv">$(LOCALURL)</span><span 
<font 
</p> 
name="description" 
in 
"> 
in 
in 
particular 
separate 
in 
lists 
“executable” 
“executable” 
in 
in 
in 
in 
class="highlighter-rouge">names.o</code> 
in 
in 
in 
line 
last 
in 
in 
indented 
in 
indented 
touch 
class="highlighter-rouge">names.o</code> 
Makefile~ 
Makefile~ 
Make’s 
particular 
in 
in 
in 
particular 
in 
Makefile~ 
in 
in 
in 
in 
particular 
anyway. 
in 
in 
in 
in 
separate 
dependent 
class="err">-s</span> 
in 
College</h2> 
last 
class="site-header"> 
from 
from 
from 
class="highlighter-rouge">cc</code>, 
from 
from 
language. 
from 
<span 
<span 
class="err">gcc</span> 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="err">gcc</span> 
<span 
<span 
<span 
<span 
class="err">gcc</span> 
<span 
<span 
<span 
<span 
class="err">gcc</span> 
<span 
<span 
character, 
Some 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
updates 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="nv">CFLAGS</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="nv">CFLAGS</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
See 
from 
<span 
<span 
<span 
<span 
<span 
<span 
from 
<li>source 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
separating 
– 
– 
links 
– 
– 
links 
actually 
actually 
actually 
links 
since 
– 
actually 
right 
another? 
recognize 
date. 
<p>Make 
actually 
actually 
actually 
actually 
(“recursive”) 
backup 
class="highlighter-rouge">PROG</code> 
class="nf">names</span> 
gnarly 
stops 
status 
<p>Make 
actually 
internally 
“<em>Managing 
right 
right 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
class="nt">--exclude</span><span 
status 
status 
instructions. 
content 
note 
note 
class="highlighter-rouge">all</code>. 
. 
challenges 
site. 
icon" 
lot 
error-prone) 
class="highlighter-rouge">ln</code>, 
name 
name 
class="err">bag.o</span> 
<p>Now, 
very 
no 
saw 
their 
name 
no 
<em>phony 
no 
name 
no 
"names" 
id="errors">Errors</h3> 
this, 
trying 
name 
data..."</span> 
their 
href="extra/">lecture 
own 
<em>assembler</em> 
complete 
here. 
time 
why 
why 
here. 
class="nv">$(OBJS)</span> 
module. 
class="nv">$(OBJS)</span> 
complete 
class="highlighter-rouge">^X-c</code> 
class="s2">"\nAdding 
<html> 
<meta 
<meta 
<meta 
<meta 
it 
used 
new 
it 
it 
object-code 
class="highlighter-rouge">.s</code> 
it 
it 
it 
it 
it 
it 
it 
it 
it 
it 
it 
it 
it 
new 
it 
used 
it 
it 
it 
it 
it 
it 
math 
math 
it 
it 
it 
it 
it 
it 
it 
used 
it 
new 
Jekyll 
permissions..."</span> 
class="err">go+rX</span> 
it 
course, 
original 
briefly 
original 
class="highlighter-rouge">bag.o</code> 
class="language-bash 
that, 
<p>I 
named 
class="highlighter-rouge">bag.o</code> 
same:</p> 
class="language-bash 
class="language-bash 
naming 
class="language-bash 
named 
class="language-bash 
<p>I 
read 
class="language-bash 
class="err">rsync</span> 
Here 
based 
https://thayer.github.io/engs50/Notes/makefiles/ 2 40878 
<!DOCTYPE 
the 
<nav 
the 
the 
the 
the 
the 
the 
the 
the 
class="highlighter-rouge">bag.h</code> 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
language). 
the 
for 
the 
the 
the 
for 
the 
for 
the 
the 
the 
the 
for 
the 
variables, 
for 
the 
for 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
fourth 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
class="highlighter-rouge">bag.h</code> 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
class="highlighter-rouge">bag.h</code> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
preferred 
the 
the 
the 
the 
the 
the 
the 
the 
the 
purpose 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
for 
the 
for 
the 
the 
compiling, 
the 
the 
for 
the 
the 
the 
for 
for 
the 
the 
the 
the 
for 
the 
the 
the 
for 
for 
the 
for 
the 
the 
for 
the 
the 
the 
for 
the 
for 
the 
for 
class="err">_site/data</span> 
for 
for 
the 
the 
for 
for 
the 
the 
the 
for 
the 
<ul> 
href="headerfiles.html">lecture 
<ul> 
link 
placed 
waste 
while 
commands. 
link 
rules 
rules 
rules 
dollar 
commands. 
link 
while 
while 
class="highlighter-rouge">cp</code> 
<ul> 
class="s2">Building..."</span> 
create 
create 
ask 
program</a></em>.</p> 
<p>Each 
ask 
class="nf">bag.h 
$ 
$ 
$ 
$ 
compiled 
compiled 
class="nf">bag.h 
class="nf">bag.h 
By 
= 
expand 
ask 
class="nf">bag.h 
prints 
prints 
ask 
make</code>.</p> 
class="o">=</span>a.out 
testing 
class="o">}</span> 
class="o">}</span> 
class="o">}</span> 
upon 
deeply 
href="/engs50/Examples/names5.c">names5.c</a>) 
together 
together 
names</code> 
together 
class="nv">$ 
class="nv">$ 
class="nv">$ 
several 
makefile 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nt">-Wall</span> 
class="nv">$ 
class="nt">-Wall</span> 
class="nt">-Wall</span> 
class="nt">-Wall</span> 
class="nt">-Wall</span> 
class="nv">$ 
class="nt">-Wall</span> 
class="highlighter-rouge">clean</code>. 
class="k">*</span>~ 
class="nv">$ 
class="nv">$ 
class="k">*</span>~ 
class="nv">$ 
class="nt">-Wall</span> 
class="k">*</span>~ 
~ 
<h1 
prior 
those 
outputs 
outputs 
(execute) 
files. 
memory 
memory 
those 
those 
those 
commands), 
class="nf">bag.c</span> 
those 
prior 
nor 
build.</p> 
those 
files. 
files. 
part 
line</h3> 
rather 
rather 
yours.</p> 
generation</li> 
class="nv">DEST</span> 
those 
those 
names</h2> 
multiple 
define 
updated.</p> 
file 
file 
file 
file 
file 
file 
extension 
file 
file 
file 
file 
file 
<em>tab</em> 
</span>make 
</span>make 
file 
class="highlighter-rouge">names</code>. 
whole 
</span>make 
assign 
assign 
values 
class="highlighter-rouge">names</code>. 
syntax 
</span>make 
</span>make 
file 
</span>make 
define 
David 
overall 
id="make-command-line">Make 
run, 
<p>Whenever 
file 
file 
David 
because, 
course 
which 
still 
still 
pieces 
which 
which 
base, 
which 
include 
include 
include 
which 
list 
include 
checked 
checked 
which 
streamline 
include 
include 
<p>This 
<p>So 
which 
which 
<p>This 
bottom 
list 
list 
rewrite 
include 
bottom 
which 
target</p> 
list 
target</p> 
list 
target</p> 
rewrite 
which 
include 
daily 
class="err">_site/</span> 
process.</p> 
“links” 
common 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
common 
class="highlight"><code><span 
class="highlight"><code><span 
author 
class="highlight"><code><span 
common 
class="highlight"><code><span 
class="highlight"><code><span 
id="automatic-variables">Automatic 
class="highlight"><code><span 
class="highlight"><code><span 
class="o">=</span>/Sections/unused 
out 
src="/engs50/50.png" 
executed. 
class="highlighter-rouge">.o</code>. 
readlinep.o: 
readlinep.o: 
file(s) 
class="k">*</span> 
explicitly 
toward 
(by 
class="highlighter-rouge">-f</code> 
remove 
class="k">*</span> 
explicitly 
(Certain 
asking.)</p> 
class="nv">LIBS</span> 
class="nv">LIBS</span> 
built 
class="highlighter-rouge">$@</code> 
class="highlighter-rouge">^X-`</code> 
Best 
<em>linker</em> 
resolving 
class="highlight"><code>names.o: 
class="highlight"><code>names.o: 
files.)</p> 
class="o">=</span><span 
up. 
class="o">=</span><span 
class="o">=</span><span 
class="o">=</span><span 
class="o">=</span><span 
class="o">=</span><span 
header 
not 
lecture, 
increasingly 
code”, 
not 
not 
not 
not 
not 
this:</p> 
not 
not 
dependency 
dependency 
not 
not 
dependency 
class="highlighter-rouge">make</code>.</p> 
class="nf">clean</span> 
not 
class="nv">OBJS</span> 
header 
class="nv">OBJS</span> 
not 
not 
rest 
not 
(My 
class="highlighter-rouge">make</code>.</p> 
Jenkins 
class="se">\*</span><span 
class="nt">-draft</span><span 
class="err">ln</span> 
class="o">)</span> 
not 
non-zero 
not 
</head> 
</nav> 
It 
class="highlighter-rouge">-c</code>) 
default, 
has 
has 
has 
class="highlighter-rouge">clean</code> 
<p>Any 
It 
Spring 
class="s2">"\nDeploying..."</span> 
outstanding 
class="page-content"> 
class="post"> 
Given 
id="make-and-makefiles">Make 
code) 
class="highlighter-rouge">bag.o</code>, 
<em><a 
class="highlighter-rouge">#include 
any 
Makefile 
notice 
already 
goes 
fails 
Makefile 
Makefile 
Makefile 
fails 
any 
Makefile 
any 
any 
Makefile 
Makefile 
Engs 
learn 
learn 
bag 
<em>bag</em> 
extract 
<em>bag</em> 
<em>bag</em> 
<em>bag</em> 
type 
input 
Notice 
type 
type 
work!</p> 
tree 
nothing 
tree 
changed, 
pass 
Notice 
removes 
class="highlighter-rouge">~</code>, 
macros</h2> 
href="http://www.gnu.org/software/make/manual/make.html#Automatic-Variables">automatic 
GNU 
type 
documentation 
first) 
leading 
leading 
initial-scale=1"> 
again!</li> 
extra</a>.</p> 
extra</a>.</p> 
extra</a>.</p> 
clearly 
id="compiling-and-linking">Compiling 
but 
produce 
depends 
depends 
depends 
but 
but 
above 
depends 
depends 
depends 
depends 
but 
depends 
depends 
but 
produce 
above 
class="nv">PROG</span> 
depends 
class="nv">PROG</span> 
depends 
but 
but 
class="nb">cat 
class="nb">cat 
class="nb">cat 
class="p">;</span> 
Balkcom. 
& 
was 
this 
was 
both 
c 
c 
c 
both 
then 
this 
class="highlighter-rouge">names</code> 
this 
tab.</p> 
c 
c 
then 
was 
both 
between 
was 
class="highlighter-rouge">names</code> 
class="highlighter-rouge">names</code> 
this 
this 
this 
class="highlighter-rouge">names</code> 
this 
April 
this 
exits 
execute 
this 
then 
this 
class="highlighter-rouge">names</code> 
documentation</a>, 
this 
execute 
class="highlighter-rouge">names</code> 
was 
width=48 
-> 
single 
interface 
module</li> 
use 
code” 
code” 
use 
every 
every 
class="err">names</span> 
class="nt">-o</span> 
use 
every 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
use 
use 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
class="nt">-o</span> 
every 
id="more-on-macros">More 
serves 
class="nt">-o</span> 
use 
class="nt">-o</span> 
every 
use 
class="nt">-o</span> 
use 
use 
use 
_site 
use 
systems. 
see 
see 
see 
(Under 
removing 
class="err">names.c</span> 
(We 
see 
options. 
see 
see 
Makefile</h2> 
see 
c), 
simply 
overwriting 
see 
simply 
overwriting 
see 
am 
</html> 
<article 
class="highlight"><code>mygcc 
Indeed, 
together).</p> 
class="highlight"><code>mygcc 
(<code 
recompile 
tab 
tab 
Indeed, 
gone. 
contents. 
macro. 
without 
Indeed, 
current 
class="highlighter-rouge"><div 
on 
(in 
class="highlighter-rouge"><div 
class="highlighter-rouge"><div 
<p>To 
on 
on 
class="highlighter-rouge"><div 
on 
class="highlighter-rouge"><div 
on 
on 
"bag.h"</code> 
class="highlighter-rouge"><div 
on 
on 
on 
add 
on 
on 
on 
on 
class="err">bag.c</span> 
spaces, 
on 
on 
on 
on 
This 
class="err">$</span> 
class="highlighter-rouge">cc</code> 
class="o">=</span>gcc 
on 
on 
on 
class="highlighter-rouge">rm</code> 
on 
class="highlighter-rouge"><div 
class="highlighter-rouge"><div 
on 
class="highlighter-rouge"><div 
class="o">=</span>gcc 
on 
on 
on 
This 
Steve 
This 
on 
Kotz, 
class="err">$(DESTURL)</span> 
class="nl">local</span><span 
on 
on 
add 
This 
Kotz, 
on 
we 
also 
we 
module.</li> 
we 
also 
we 
we 
we 
we 
we 
commandline 
also 
we 
we 
we 
also 
we 
also 
also 
we 
we 
class="highlighter-rouge">bag.h</code>, 
class="nl">bag.o</span><span 
also 
class="nl">bag.o</span><span 
class="nl">bag.o</span><span 
we 
I 
class="highlighter-rouge">bag.h</code>, 
we 
we 
also 
also 
class="nl">bag.o</span><span 
class="o">=</span>c11 
also 
class="nl">bag.o</span><span 
we 
class="o">=</span>c11 
class="o">=</span>c11 
class="o">=</span>c11 
class="o">=</span>c11 
target?</h2> 
class="o">=</span>c11 
we 
we 
class="highlighter-rouge">*.o</code>, 
also 
I 
also 
we 
class="o">=</span>c11 
class="nl">bag.o</span><span 
also 
we 
I 
we 
documents 
I 
class="nf">build 
I 
we 
I 
Engs50 
class="highlighter-rouge">make</code>, 
constrained 
class="highlighter-rouge">bag.c</code> 
complex, 
class="highlighter-rouge">bag.c</code> 
class="highlighter-rouge">bag.s</code> 
class="highlighter-rouge">bag.c</code> 
highlighter-rouge"><div 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="highlighter-rouge">make</code>, 
highlighter-rouge"><div 
class="highlighter-rouge">make</code>, 
just 
class="highlighter-rouge">make</code>, 
highlighter-rouge"><div 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
just 
highlighter-rouge"><div 
highlighter-rouge"><div 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
highlighter-rouge"><div 
id="which-target">Which 
just 
highlighter-rouge"><div 
first, 
just 
want 
highlighter-rouge"><div 
class="o">:</span> 
highlighter-rouge"><div 
highlighter-rouge"><div 
class="o">:</span> 
go 
highlighter-rouge"><div 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
class="o">:</span> 
want 
just 
these 
dir</code>) 
highlighter-rouge"><div 
class="o">:</span> 
class="highlighter-rouge">make</code>, 
class="highlighter-rouge">make</code>, 
highlighter-rouge"><div 
want 
<li>creating 
highlighter-rouge"><div 
class="o">:</span> 
just 
class="o">:</span> 
</span>_config-<span 
class="o">:</span> 
</span>_config-<span 
class="o">:</span> 
</span>_config-<span 
class="o">:</span> 
just 
these 
maintainable, 
/> 
a 
a 
<li>the 
a 
a 
today's 
a 
a 
is 
a 
a 
a 
a 
a 
tedious 
a 
is 
a 
a 
a 
a 
a 
a 
a 
is 
a 
is 
a 
program, 
is 
a 
a 
is 
is 
is 
a 
is 
a 
a 
a 
is 
a 
is 
a 
changed 
standard 
standard 
is 
a 
a 
a 
readlinep.o</span> 
a 
a 
a 
a 
is 
is 
a 
is 
is 
make. 
readlinep.o</span> 
readlinep.o</span> 
a 
a 
is 
a 
is 
a 
a 
is 
is 
a 
is 
a 
is 
a 
a 
is 
is 
a 
a 
is 
a 
a 
a 
we’re 
a 
is 
a 
a 
a 
a 
is 
a 
readlinep.o</span> 
a 
a 
a 
is 
a 
a 
a 
is 
http-equiv="X-UA-Compatible" 
files, 
needs, 
files, 
files, 
files, 
files, 
second 
knows 
files, 
definitions 
Written 
files, 
backquote) 
class="o">=</span>/Reading/future 
<p> 
<div 
<div 
<div 
<div 
recompiling 
<div 
<div 
file:</p> 
<div 
<div 
deeper, 
<div 
don’t 
<div 
class="nl">names</span><span 
<div 
<div 
class="nl">names</span><span 
<div 
<div 
class="nl">names</span><span 
macro 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
declares 
<div 
<div 
macro 
don’t 
<div 
class="nl">names</span><span 
href="http://shop.oreilly.com/product/9780596006105.do">updated</a> 
<div 
class="highlighter-rouge">emacs</code> 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
Zhou, 
large, 
class="post-content"> 
</ul> 
<!--You 
be 
</ul> 
shell 
be 
intermediate 
intermediate 
files.</p> 
be 
rebuilt 
We 
We 
be 
be 
proper 
be 
files.</p> 
We 
We 
We 
We 
be 
... 
be 
be 
be 
notices 
be 
be 
shell 
</ul> 
class="err">@echo</span> 
class="err">-R</span> 
class="err">-R</span> 
class="err">@echo</span> 
class="err">@echo</span> 
(jekyll 
href="/engs50/Examples/">Examples</a>] 
class="wrapper"> 
<h3 
data 
data 
<h3 
“source 
effort 
<h3 
around 
around 
could 
done:</p> 
quickly 
<h3 
<h3 
<h3 
could 
follows</p> 
<h3 
manual 
<h3 
scripts 
class="se">\*</span> 
class="err">../data</span> 
class="wrapper"> 
specific 
re-used 
must 
specific 
assigns 
must 
ran 
commandline, 
dSYM 
class="highlight"><code>NAME 
specific 
specific 
Talbot’s 
start 
id="non-compilation-makefiles">Non-compilation 
server 
class="s2">Building 
server 
class="s2">Building 
href="activity.html">activity</a> 
class="site-title" 
href="/engs50/Resources/">Resources</a>] 
code 
code 
code 
class="highlighter-rouge">make</code> 
<p>From 
code 
code 
code 
libraries) 
code 
code 
creating 
code 
won’t 
class="highlighter-rouge">make</code> 
try 
class="highlighter-rouge">make</code> 
together. 
creating 
class="highlighter-rouge">make</code> 
<p>Compare 
flags.</p> 
class="highlighter-rouge">make</code> 
encounters 
<p>You 
reconsider 
<p>You 
code 
class="highlighter-rouge">make</code> 
class="highlighter-rouge">make</code> 
class="highlighter-rouge">make</code> 
with 
with 
so 
with 
with 
when 
output 
when 
with 
creates 
with 
with 
when 
again, 
so 
with 
with 
when 
when 
saved!</p> 
existing 
so 
so 
with 
(Actually, 
with 
when 
id="cleaning-up">Cleaning 
with 
creates 
with 
with 
examples 
with 
with 
many 
failed, 
class="nv">$@</span> 
find 
with 
existing 
many 
with 
webpages 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
so 
with 
<strong>2018-10-10</strong> 
</a> 
run 
readlinep.c 
have 
run 
run 
readlinep.c 
run 
four 
readlinep.c 
bag.o 
bag.o 
helps 
readlinep.c 
bag.o 
have 
dependencies, 
bag.o 
have 
readlinep.c 
readlinep.c 
bag.o 
bag.o 
bag.o 
readlinep.c 
run 
run 
run 
bag.o 
bag.o 
readlinep.c 
bag.o 
readlinep.c 
bag.o 
readlinep.c 
bag.o 
run 
bag.o 
bag.o 
have 
refer 
bag.o 
readlinep.c 
bag.o 
readlinep.c 
readlinep.c 
bag.o 
readlinep.c 
bag.o 
bag.o 
run 
have 
bag.o 
book 
defines 
run 
cs50@green.cs.dartmouth.edu:public_html 
class="o">=</span>/Makefile 
class="o">=</span>/Reading/unused 
class="highlighter-rouge">mygcc</code> 
shown. 
programs. 
or 
code. 
code. 
magical 
</blockquote> 
commands, 
assembler, 
code. 
readlinep.h 
readlinep.h 
or 
editors 
</blockquote> 
let 
readlinep.h 
readlinep.h 
names* 
</span></code></pre></div></div> 
readlinep.h 
readlinep.h 
or 
</blockquote> 
class="nl">clean</span><span 
readlinep.h 
readlinep.h 
Once 
class="nl">clean</span><span 
or 
or 
or 
handy!</p> 
</blockquote> 
deploying 
class="nl">clean</span><span 
class="highlighter-rouge">echo</code> 
html> 
class="post-title">Modules 
he 
compile 
compile 
compile 
compile 
compile 
translates 
each 
each 
<p>(They 
dependencies 
each 
dependencies 
dependencies 
readlinep.h</span> 
compile 
each 
dependencies 
readlinep.h</span> 
readlinep.h</span> 
class="k">*</span>.dSYM 
class="k">*</span>.dSYM 
defined, 
<p>It 
Makefiles!</p> 
readlinep.h</span> 
class="k">*</span>.dSYM 
dependencies 
compile 
dependencies 
dependencies 
newer 
dependencies 
compile 
three 
three 
three 
need 
need 
need 
result 
need 
need 
class="highlighter-rouge"><span 
content="IE=edge"> 
understandable 
dive 
preprocessor, 
Assembly 
depend 
depend 
depend 
depend 
complicated 
depend 
depend 
depend 
targets 
depend 
depend 
targets 
Charles 
class="highlighter-rouge">-</code> 
<link 
<link 
<link 
Make 
application;</li> 
Makefiles</h2> 
reads 
reads 
reads 
machine 
machine 
reads 
machine 
references 
reads 
Make 
Make 
Make 
neither 
Make 
Make 
Make 
Make 
lines 
Make 
Make 
Make 
Make 
Make 
Make 
Make 
Make 
proceed 
Make 
proceed 
Make 
proceed 
Make 
Make 
makefiles</h2> 
during 
lines 
lines 
Professors 
program 
<p>For 
<p>For 
<p>For 
program 
program 
linked 
program 
translating 
program 
program 
linked 
class="nf">readlinep.c</span> 
spaces. 
Because 
relationship 
Second, 
compiler. 
<p>When 
That’s 
program 
class="nt">-rf</span> 
class="nt">-rf</span> 
program 
program 
stdio 
linked 
program 
class="nt">-rf</span> 
program 
class="highlighter-rouge">-k</code> 
provides 
<p>For 
~cs50/.emacs 
loads 
ignore 
Palmer, 
indebted 
thus 
href="/engs50/Examples/names9.c">names9</a> 
href="/engs50/Examples/names9.c">names9</a> 
large 
program; 
large 
thus 
change. 
class="language-make 
thus 
class="language-make 
class="language-make 
all</code> 
all</code> 
direct 
class="language-make 
class="language-make 
class="language-make 
class="highlighter-rouge">Makefile</code></p> 
class="language-make 
class="highlighter-rouge">~cs50/.emacs</code> 
class="language-make 
class="site-nav"> 
href="/engs50/Notes/">Notes</a>] 
interface, 
o 
class="highlighter-rouge">gcc</code>.</p> 
OS 
sophisticated, 
o 
o 
argument 
name(s) 
<em>dependencies</em>. 
o 
(list) 
(list) 
success 
class="highlighter-rouge">gdb</code>.</p> 
purpose, 
directory.</p> 
push 
push 
push 
deeper 
href="preprocessor.html">lecture 
that 
that 
that 
that 
that 
that 
that 
that 
that 
</span>Makefile 
that 
that 
</span>Makefile 
</span>Makefile 
that 
that 
that 
that 
that 
that 
extend 
</span>Makefile 
</span>Makefile 
that 
that 
that 
comment, 
that 
that 
that 
that 
make</em>” 
, 
*not* 
jekyll 
jekyll 
class="err">go-w</span> 
jekyll 
viewing..."</span> 
jekyll 
jekyll 
class="highlighter-rouge">@</code> 
that 
that 
extend 
<title>Modules 
application’s 
divide 
like 
statements. 
like 
like 
<p>But 
smart 
important 
like 
class="highlighter-rouge">Makefile</code>, 
class="highlighter-rouge">Makefile</code>, 
like 
like 
Kotz 
keystroke 
keystroke 
test 
destination 
educators. 
Makefiles</title> 
list</em> 
<p>As 
an 
an 
an 
“assembly 
an 
readlinep.o 
readlinep.o 
an 
readlinep.o 
class="err">readlinep.o</span> 
class="nf">bag.h</span> 
readlinep.o 
readlinep.o 
readlinep.o 
an 
readlinep.o 
class="nf">bag.h</span> 
readlinep.o 
readlinep.o 
readlinep.o 
readlinep.o 
class="nf">bag.h</span> 
readlinep.o 
readlinep.o 
readlinep.o 
readlinep.o 
readlinep.o 
readlinep.o 
readlinep.o 
class="nf">bag.h</span> 
an 
than 
an 
than 
than 
testing</li> 
class="o">=</span>/examples/unused 
open 
open 
see.</p> 
an 
align=center 
take 
take 
class="nl">readlinep.o</span><span 
class="nl">readlinep.o</span><span 
class="nl">readlinep.o</span><span 
insert 
class="nl">readlinep.o</span><span 
class="nl">readlinep.o</span><span 
class="nl">readlinep.o</span><span 
print 
emacs, 
emacs, 
<p>Here, 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
print 
print 
<em>test</em> 
- 
- 
<em>compiler</em> 
them.)</p> 
some 
some 
some 
some 
class="nv">CC</span><span 
we’ve 
desired 
some 
command. 
class="nv">CC</span><span 
class="highlighter-rouge">cd 
some 
class="nv">$^</span> 
warns 
<li>maintaining 
MacBook 
some 
command. 
some 
generic 
implementation 
now 
compilation 
now 
now 
variables 
“compile” 
variables 
class="highlighter-rouge">CC</code> 
now 
support 
generic 
compilation 
compilation 
after 
useful 
useful 
variables</a>:</p> 
customation:</p> 
class="o">=</span>/Sections/future 
class="err">-e</span> 
class="err">$(EXCLUDES)</span> 
Dartmouth 
href="/engs50/Notes/makefiles/"> 
needed 
compiler 
compiler 
operating 
together, 
compiler 
compiler 
class="highlight"><code>names: 
virtually 
compiler 
class="highlighter-rouge">touch</code> 
needed 
compiler 
compiler 
needed 
"bag" 
varies 
readable.</p> 
tutorials 
compiler 
<li>running 
directories)</li> 
<head> 
about 
next 
first 
closer 
names.o 
names.o 
first 
names.o 
about 
about 
names.o 
make: 
names.o 
names.o 
first 
both. 
about 
names.o 
sections 
names.o 
names.o 
names.o 
class="highlighter-rouge">gcc</code>. 
about 
about 
names.o 
first 
names.o 
names.o 
first 
names.o 
names.o 
class="nf">$(OBJS)</span> 
names.o 
class="nf">$(OBJS)</span> 
about 
class="highlighter-rouge">file</code> 
tells 
(ctrl-X 
tells 
get 
(ctrl-X 
jumps 
about 
tells 
tells 
<p><small>This 
converted 
linking</h3> 
Gnu 
rules. 
class="highlighter-rouge">LIBS</code>; 
top 
<p>Although 
updated 
<li>how 
action 
reference 
<p>Actually, 
rebuild 
class="nf">names.c</span> 
rebuild 
rebuild 
rules</em> 
rebuild 
~/.emacs</span></code> 
local 
local 
local 
allow 
<code 
<code 
<code 
<code 
Terminal 
application-specific 
list.</p> 
<code 
(and 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
bash 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
up 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
up 
ls 
<code 
<code 
up 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
sign 
bash 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
asks 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="se">\*</span>~ 
class="err">$(DEST)</span> 
<code 
<code 
<code 
<code 
<code 
<code 
id="activity">Activity</h2> 
<code 
<code 
<img 
more 
more 
Make.</p> 
though 
yet 
class="err">readlinep.c</span> 
class="s1">' 
were 
were 
Make.</p> 
more 
http://127.0.0.1:4000 
message.</p> 
<footer 
process 
text 
hood, 
process 
requires 
requires 
using</p> 
encountering 
class="highlighter-rouge">dir/Makefile</code>). 
customized 
files.</li> 
files:</p> 
version 
class="highlighter-rouge">readlinep</code> 
one 
system. 
one 
class="highlighter-rouge">-o 
one 
builds 
needed.</p> 
one 
realize 
rebuilt. 
command-line 
command-line 
class="nv">$(CC)</span> 
one 
class="nv">$(CC)</span> 
<p>With 
class="nv">$(CC)</span> 
error 
build. 
error 
error 
command-line 
class="nv">$(CC)</span> 
style 
makefiles 
http://www.cs.dartmouth.edu/~cs50/ 
error 
version 
href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen 
name="viewport" 
structure. 
point 
left 
class="nf">readlinep.h</span> 
Time 
class="nf">readlinep.h</span> 
class="nf">readlinep.h</span> 
macros 
macros 
macros 
class="nl">$(PROG)</span><span 
class="nl">all</span><span 
class="nl">$(PROG)</span><span 
class="nf">readlinep.h</span> 
users</h3> 
class="s2">"\nFixing 
content="width=device-width, 
alt="icon"> 
look 
can 
can 
can 
look 
look 
textual 
file; 
look 
<em>dependency 
can 
class="nt">-std</span><span 
class="nt">-std</span><span 
class="nt">-std</span><span 
class="nt">-std</span><span 
class="nt">-std</span><span 
can 
class="nt">-std</span><span 
indicates 
types 
class="k">*</span>.o 
class="k">*</span>.o 
can 
library 
library 
stdlib, 
phony 
nice 
class="nt">-std</span><span 
class="k">*</span>.o 
look 
can 
class="highlighter-rouge">.emacs</code> 
can 
phony 
<a 
<a 
<a 
<a 
<a 
<a 
class="highlighter-rouge">names.o</code>, 
pretty 
names<span 
convention, 
convention, 
names<span 
final 
<a 
<a 
<a 
goodie” 
<a 
file. 
webserver:</p> 
<a 
<a 
</font> 
it’s 
it’s 
tool 
human-readable 
addresses 
something 
gcc 
gcc 
it’s 
id="dependencies">Dependencies</h3> 
gcc 
gcc 
gcc 
gcc 
gcc 
gcc 
gcc 
it’s 
it’s 
gcc 
gcc 
gcc 
gcc 
gcc 
gcc 
gcc 
chooses 
teach 
class="highlighter-rouge">-r</code> 
it’s 
<p>If 
errors, 
id="for-emacs-users">for 
<p>If 
errors, 
<p>If 
class="err">ssh</span> 
</article> 
our 
functions 
our 
source 
class="highlighter-rouge">Makefile</code> 
source 
our 
containing 
containing 
source 
functions 
<blockquote> 
source 
source 
source 
source 
source 
source 
source 
<blockquote> 
source 
our 
class="highlighter-rouge">Makefile</code> 
our 
our 
Make; 
our 
our 
our 
<blockquote> 
our 
class="highlighter-rouge">Makefile</code> 
class="highlighter-rouge">Makefile</code> 
our 
class="highlighter-rouge">Makefile</code> 
id="complete-makefile">Complete 
our 
our 
our 
our 
<blockquote> 
(staging 
serve 
serve 
class="highlighter-rouge">Makefile</code> 
size=-1> 
</body> 
C 
Makefiles 
C 
C 
only 
C 
C 
C 
linker 
linker 
linker 
linker 
C 
C 
only 
C 
C 
class="nl">names.o</span><span 
class="nl">names.o</span><span 
class="nl">names.o</span><span 
only 
linker 
only 
C 
class="nl">names.o</span><span 
C 
class="nl">names.o</span><span 
too, 
bash.</p> 
class="nl">names.o</span><span 
only 
C 
default 
dir</code> 
working 
sequences 
website 
class="nv">LOCALURL</span> 
never 
listed 
never 
never 
end, 
listed 
listed 
cc 
cc 
cc 
These 
never 
These 
continue 
runs 
Mecklenburg 
subwindow. 
runs 
continue 
to 
to 
to 
to 
to 
design, 
to 
to 
to 
to 
to 
to 
to 
collection 
to 
to 
to 
to 
to 
href="http://programmer.97things.oreilly.com/wiki/index.php/The_Linker_Is_not_a_Magical_Program">The 
class="highlight"><code>gcc 
to 
collection 
to 
to 
optimize 
to 
to 
to 
to 
tab, 
target. 
class="err">names.o</span> 
to 
tab, 
to 
to 
to 
class="nt">-c</span> 
class="nt">-c</span> 
class="nt">-c</span> 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
unnecessary: 
<em>implicit 
to 
class="nt">-c</span> 
class="nt">-c</span> 
class="nt">-c</span> 
to 
to 
to 
to 
to 
class="highlighter-rouge">CFLAGS</code>. 
to 
to 
to 
to 
class="nt">-c</span> 
class="nt">-c</span> 
class="nt">-c</span> 
far, 
to 
class="nt">-c</span> 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
able 
to 
to 
to 
to 
to 
to 
to 
to 
Determine 
to 
to 
to 
to 
id="documentation">Documentation</h3> 
installed 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
class="nt">--delete-excluded</span> 
to 
to 
to 
to 
to 
to 
to 
to 
to 
of 
of 
of 
of 
form 
of 
of 
of 
form 
of 
of 
of 
of 
of 
of 
of 
of 
of 
<p>On 
of 
of 
of 
<p>On 
of 
two 
class="highlighter-rouge">.o</code> 
class="highlighter-rouge">.o</code> 
of 
necessary 
list. 
of 
two 
two 
of 
two 
two 
class="highlighter-rouge">make 
of 
class="highlighter-rouge">make 
of 
of 
of 
of 
of 
of 
of 
class="highlighter-rouge">make 
of 
of 
of 
of 
of 
of 
of 
of 
class="highlighter-rouge">make 
of 
of 
class="nv">DESTURL</span> 
of 
of 
of 
software 
names 
The 
It’s 
The 
may 
The 
The 
names 
names 
The 
The 
The 
names 
names 
had 
names 
names 
First, 
calls 
names 
names 
names 
names 
The 
names 
$(NAME) 
names 
names 
names 
The 
The 
program. 
It’s 
class="o">=</span>/examples/future 
<header 
<header 
its 
its 
its 
executable 
its 
example, 
instructions 
instructions 
instructions 
example, 
executable 
Clearly, 
its 
executable 
edit 
its 
recompiled 
executable 
its 
executable 
its 
place 
its 
file):</p> 
its 
executable, 
executable 
class="nf">all 
executable 
href="/engs50/Examples/names-Makefile">names-Makefile</a> 
example, 
its 
its 
example, 
edit 
example, 
target.</p> 
href="/engs50/"> 
like</p> 
become 
executable. 
<p>The 
executable. 
<p>The 
<p>The 
<p>The 
class="highlighter-rouge">bag.o</code>. 
loading 
confused 
<p>The 
like</p> 
<p>The 
tree</em> 
<p>Notice 
<p>The 
ok 
<p>The 
<p>Notice 
<p>The 
flag.)</p> 
<p>The 
<p>The 
<p>The 
(CS50) 
command 
view 
command 
command 
configuration 
command 
command 
command 
command 
<p>and 
command 
command 
command 
explicit 
explicit 
command 
command 
<p>is 
built, 
class="nv">$(PROG)</span> 
class="nv">$(PROG)</span> 
class="nv">$(PROG)</span> 
command 
might 
command 
(as 
useful, 
view 
over-writing 
might 
class="nt">--incremental</span> 
command 
command 
command 
command 
(CS50) 
</footer> 
class="highlighter-rouge">namesA.c</code> 
</code></pre></div></div> 
further 
</code></pre></div></div> 
</code></pre></div></div> 
file.) 
</code></pre></div></div> 
</code></pre></div></div> 
<p>(It 
because 
</code></pre></div></div> 
class="err">-o</span> 
</code></pre></div></div> 
<p>Important: 
because 
</code></pre></div></div> 
</code></pre></div></div> 
implicit 
implicit 
because 
</code></pre></div></div> 
implicit 
uses 
</code></pre></div></div> 
</code></pre></div></div> 
because 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
uses 
</code></pre></div></div> 
uses 
</code></pre></div></div> 
uses 
variables</h3> 
</code></pre></div></div> 
Robert 
</code></pre></div></div> 
Ira 
</code></pre></div></div> 
class="site-footer"> 
build 
rel="canonical" 
other 
commands 
commands 
as 
other 
other 
class="highlighter-rouge">bag_new()</code>, 
time, 
they 
as 
as 
class="nf">names.o 
commands 
as 
modification 
changes 
commands 
they 
class="nf">names.o 
class="nf">names.o 
rules, 
commands 
time, 
build 
it:</p> 
build 
rule 
commands 
rule 
build 
as 
as 
build 
rule 
rule 
rule 
other 
as 
id="tips">Tips</h2> 
other 
other 
build 
commands 
other 
as 
class="nf">names.o 
commands 
build 
class="p">@</span><span 
build 
build 
class="p">@</span><span 
build 
build 
build 
class="p">@</span><span 
commands 
</div> 
</div> 
</div> 
</div> 
design 
Makefiles</h1> 
design 
files 
been 
little 
language 
files 
language 
assembler 
files 
translate 
files 
files 
files 
bag.o: 
files 
files 
files 
files 
bag.o: 
files 
files 
files 
files 
files 
files 
files 
files 
date 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
files 
projects 
files 
class="err">_site/*</span> 
class="err">_site/*</span> 
how 
Fortunately, 
incrementally 
file, 
object 
file, 
object 
object 
object 
object 
assume 
object 
assume 
target 
how 
how 
follow 
object 
object 
object 
how 
object 
savvy 
object 
file, 
object 
object 
object 
object 
object 
object 
object 
target 
target 
target 
target 
up</h2> 
how 
how 
target 
object 
how 
object 
object 
how 
# 
# 
object 
object 
reader 
likely 
them, 
target 
target 
# 
(<a 
called 
called 
other. 
called 
do 
do 
called 
called 
flag 
flag 
called 
Makefile! 
program.</p> 
things 
message, 
class="highlighter-rouge">man 
things 
CS..."</span> 
class="o">(</span>sleep 
</header> 
</header> 
pair 
although 
<p>Recall 
set 
global 
ld 
same 
set 
enough 
line, 
making 
line, 
Let’s 
(“force”) 
this</p> 
although 
same 
changed. 
online 
management</li> 
[script](/engs50/Notes/makefiles/script.txt), 
good 
included 
good 
well 
included 
good 
class="highlighter-rouge">-n</code> 
class="highlighter-rouge">$?</code> 
class="nv">EXCLUDES</span> 
class="err">--delete</span> 
rel="shortcut 
declarations 
bag.c 
bag.c 
bag.c 
<p>Again, 
bag.c 
bag.c 
bag.c 
bag.c 
bag.c 
bag.c 
bag.c 
bag.c 
bag.c 
typed 
bag.c 
bag.c 
href="http://www.gnu.org/software/make/manual/make.html">GNU 
pages 
class="err">-alcvz</span> 
class="highlight"><pre 
Before 
class="highlight"><pre 
class="highlight"><pre 
running 
compilation.</p> 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
<em>target</em>, 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="nt">-pedantic</span> 
class="highlight"><pre 
class="nt">-pedantic</span> 
class="nt">-pedantic</span> 
class="nt">-pedantic</span> 
class="nt">-pedantic</span> 
class="highlight"><pre 
class="nt">-pedantic</span> 
class="highlight"><pre 
up!</p> 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="nt">-pedantic</span> 
option 
running 
class="highlight"><pre 
class="highlight"><pre 
regression 
class="highlight"><pre 
class="o">{</span>base,cs<span 
class="o">{</span>base,cs<span 
class="footer-heading">Engs50 
<strong>18:07</strong>.</small></p> 
class="highlighter-rouge">.c</code> 
class="highlighter-rouge">as</code>.</p> 
it. 
function 
transitive: 
(or 
class="highlighter-rouge">.c</code> 
class="nt">-ggdb</span> 
class="nt">-ggdb</span> 
class="nt">-ggdb</span> 
class="nt">-ggdb</span> 
class="nt">-ggdb</span> 
class="nt">-ggdb</span> 
exit 
“phony”:</p> 
it. 
Below, 
example 
class="nt">-ggdb</span> 
If 
example 
variety 
k</code> 
If 
&amp; 
exit 
exit 
exit 
into 
into 
structure, 
into 
into 
into 
into 
into 
into 
into 
into 
into 
together:</p> 
change 
change 
</span><span 
</span><span 
</span><span 
into 
</span><span 
clever 
change 
</span><span 
into 
decided 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
class="highlighter-rouge">all</code> 
<p>Look 
</span><span 
</span><span 
into 
</span><span 
</span><span 
</span><span 
change 
it! 
live 
</span><span 
</span><span 
_config.yml 
</span><span 
_config.yml 
_config.yml 
class="err">open</span> 
</span><span 
_config.yml 
_config.yml 
_config.yml 
will 
will 
id="extracting-bag-from-names">Extracting 
Our 
will 
“object 
binary 
binary 
will 
will 
tell 
will 
tell 
clean 
e.g., 
clean 
tell 
fully 
will 
saved 
will 
file</code> 
class="highlighter-rouge">--directory=dir</code> 
(i.e., 
will 
different, 
class="err">chmod</span> 
class="err">chmod</span> 
clean 
will 
designed 
Taylor</a> 
at 
bags, 
<p>Since 
at 
at 
class="highlighter-rouge">readlinep.o</code>, 
does 
class="highlighter-rouge">gcc</code> 
at 
forth. 
does 
class="highlighter-rouge">gcc</code> 
class="highlighter-rouge">gcc</code> 
does 
<p>There 
arguments 
class="highlighter-rouge">gcc</code> 
at 
at 
class="highlighter-rouge">gcc</code> 
does 
class="highlighter-rouge">gcc</code> 
class="nt">-lm</span> 
class="nv">$(LIBS)</span> 
class="nt">-lm</span> 
class="nv">$(LIBS)</span> 
at 
at 
does 
supports 
perhaps 
class="highlighter-rouge">~/.emacs</code> 
class="gh">diff 
~/cs50/.emacs 
CS 
class="o">{</span>base,local<span 
arguments 
at 
charset="utf-8"> 
content="In 
reliable, 
Unix 
written 
machine-level 
Unix 
Unix 
For 
Unix 
if 
if 
written 
if 
class="highlighter-rouge">Makefile</code>:</p> 
if 
class="highlighter-rouge">Makefile</code>:</p> 
if 
if 
addition 
if 
utility 
class="highlighter-rouge">$^</code> 
<li>automated 
class="nt">--destination</span> 
you 
you 
href="/engs50/css/main.css"> 
href="/engs50/Reading/">Reading</a>] 
<h2 
<h2 
<p>will 
dependencies</p> 
you 
cannot 
<h2 
<h2 
class="nt">-f</span> 
class="nt">-f</span> 
class="nt">-f</span> 
class="nt">-f</span> 
<h2 
you 
harmless 
you 
you 
<h2 
class="nt">-f</span> 
class="nt">-f</span> 
once, 
<h2 
messages, 
you 
class="highlighter-rouge">-C 
you 
you 
you 
you 
you 
you 
you’ve 
you 
<h2 
actions:</p> 
class="nt">-f</span> 
<h2 
<h2 
rel="stylesheet" 
“module” 
programs 
programs 
finds 
libraries, 
libraries, 
libraries, 
put 
pretended 
you’ll 
you’ll 
macro-substitution 
put 
you’ll 
libraries, 
needing 
cp 
LaTeX</li> 
borrowing 
class="o">=</span>/Labs/unused 
class="o">=</span>/Lectures/unused 
class="p">-</span>rm 
class="p">-</span>rm 
class="p">-</span>rm 
today’s 
module, 
make 
them 
(from 
instead 
(from 
them 
format 
them 
them 
them 
make 
them 
them 
instead 
inform 
them 
them 
them 
them 
first. 
<p>In 
them 
them 
your 
make 
instead 
make 
make 
your 
your 
class="o">=</span>/Comics/unused 
class="o">=</span>/Lectures/future 
<p>In 
and 
and 
development 
and 
and 
and 
and 
and 
easy 
and 
hours 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
worry 
and 
worry 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
stick 
and 
and 
and 
those. 
and 
and 
and 
complex 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
easy 
and 
and 
and 
If, 
and 
and 
and 
and 
subdirectory.</p> 
and 
CS50 
and 
and 
and 
development 
and 
and 
and 
CS50 
and 
site 
and 
and 
and 
and 
