tools. 
<body> 
class="post-header"> 
are 
all 
easier, 
are 
lives 
are 
are 
anything” 
are 
cleanup, 
id="goals">Goals</h3> 
well-tested 
themselves. 
know 
suport 
class="p">,</span> 
</span> 
know 
themselves. 
function. 
class="p">,</span> 
class="p">,</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
call 
class="p">,</span> 
class="p">,</span> 
call 
function. 
class="p">,</span> 
class="p">,</span> 
pointer.</li> 
starter 
page 
class="nf">myprint</span><span 
coding 
<p>Some 
reliable. 
class="n">p</span> 
class="n">student</span><span 
prototype 
<p>Today 
time. 
I’ll 
I’ll 
Thus,</p> 
stack 
stack 
segment, 
looks 
looks 
even 
even 
by 
by 
concept 
by 
contain 
by 
by 
Campbell, 
href="/engs50/50.png" 
<li>Function 
pointers.</li> 
saves 
user 
indistinguishable, 
(key,item) 
In 
[<a 
href="/engs50/Labs/">Labs</a>] 
[<a 
[<a 
[<a 
[<a 
Finally, 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="n">p</span><span 
class="o">=</span> 
class="o">=</span> 
In 
class="o">=</span> 
class="o">=</span> 
words, 
given 
almost 
names.</li> 
<font 
</p> 
in 
name="description" 
in 
"> 
in 
stacks, 
in 
give 
give 
give 
in 
in 
in 
in 
in 
in 
class="highlighter-rouge">printfunc</code> 
adds 
in 
in 
in 
separate 
in 
in 
in 
College</h2> 
last 
class="site-header"> 
modules.</li> 
modules.</li> 
from 
from 
<p>Object-oriented 
But 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="kt">void</span> 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
Like 
class="kt">void</span> 
<span 
<span 
<span 
<span 
<span 
class="kt">void</span> 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
%d)"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="kt">void</span> 
<span 
<span 
<span 
<span 
<span 
class="kt">void</span> 
<span 
from 
from 
separating 
– 
– 
class="language-c 
actually 
class="language-c 
class="language-c 
gnarly 
class="language-c 
bags</h2> 
referenced 
– 
– 
everything 
A 
note 
class="p">)(</span><span 
class="p">)(</span><span 
A 
stored 
icon" 
would 
no 
class="kt">char</span> 
no 
class="kt">char</span> 
class="highlighter-rouge">printfunc</code>, 
would 
class="kt">char</span> 
their 
time 
data-structure 
<em>pointers 
class="kt">FILE</span> 
class="kt">FILE</span> 
extracts 
exported 
complete 
items 
<html> 
<meta 
<meta 
<meta 
<meta 
class="highlighter-rouge">void*</code>.</li> 
it 
later 
it 
new 
new 
it 
it 
it 
it 
it 
it 
it 
it 
grows 
it 
new 
logic’ 
‘templates’ 
pointer. 
char, 
naming 
syntax:</p> 
based 
<!DOCTYPE 
the 
<nav 
the 
for 
the 
the 
for 
the 
the 
the 
the 
linked-list 
the 
linked-list 
string 
for 
the 
the 
the 
for 
for 
string 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
address 
the 
the 
the 
the 
address 
the 
the 
the 
address 
for 
the 
the 
the 
the 
the 
for 
the 
address 
the 
the 
the 
free 
the 
the 
string 
address 
the 
the 
class="highlighter-rouge">bag.h</code> 
for 
the 
the 
the 
the 
the 
the 
<ul> 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
<ul> 
<ul> 
number 
once 
By 
create 
way 
ask 
ask 
class="s">"hello"</span><span 
compiled 
create 
opaque 
upon 
deeply 
thing, 
thing, 
case, 
class="n">malloc</span><span 
function</em> 
case, 
<h1 
robust, 
rather 
rather 
class="highlighter-rouge">foo(a, 
those 
memory 
memory 
<li>Public 
those 
multiple 
multiple 
languages 
define 
languages 
languages 
syntax 
bag.</p> 
bag.</p> 
course 
list 
list 
things.</p> 
delete 
delete 
delete 
delete 
class="p">)</span> 
which 
C</h1> 
common 
common 
needed. 
<p>C 
strings 
class="highlight"><code><span 
provide 
needed. 
class="highlight"><code><span 
class="highlight"><code><span 
class="n">printfunc</span><span 
class="highlight"><code><span 
class="n">printfunc</span><span 
common 
bag_t</code> 
(created 
strings 
out 
src="/engs50/50.png" 
built 
contract 
returns 
structure.</li> 
close 
id="modularity-and-reuse">Modularity 
resides 
class="highlighter-rouge">foo</code> 
class="highlighter-rouge">(*variablename)</code> 
initialized 
header 
within 
structure 
not 
templates, 
class="highlighter-rouge">void*</code>. 
class="n">anything</span><span 
this:</p> 
structure 
<li>Heap 
structure 
href="/engs50/Examples/trees">binary-tree 
</head> 
</nav> 
has 
program) 
has 
has 
class="highlighter-rouge">a</code>, 
class="n">valuep</span><span 
It 
has 
split 
<li>No 
outstanding 
class="page-content"> 
class="post"> 
any 
compare, 
any 
Recall 
any 
modify 
study 
Engs 
learn 
learn 
introducing 
type 
class="o">*</span> 
type 
pass 
pass 
pass 
calling 
class="p">);</span> 
class="p">);</span> 
Notice 
class="p">);</span> 
<em>bag</em> 
bag 
<em>bag</em> 
bag 
type 
bag 
bag 
bag 
<em>bag</em> 
initial-scale=1"> 
importance 
but 
tomorrow 
but 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="highlighter-rouge">*</code> 
<em>module</em>, 
Balkcom. 
& 
this 
then 
this 
then 
class="highlighter-rouge">names</code> 
student</code> 
this 
this 
this 
class="highlighter-rouge">void*</code> 
this 
class="n">fprintf</span><span 
then 
this 
class="highlighter-rouge">names</code> 
Items 
class="highlighter-rouge">void*</code> 
pairs 
was 
width=48 
use 
every 
use 
use 
use 
use 
use 
href="activity.html">activity</a>, 
systems. 
‘business 
clearer 
simply 
simply 
(We 
am 
</html> 
<article 
without 
class="o">-&gt;</span><span 
class="o">-&gt;</span><span 
class="o">-&gt;</span><span 
without 
Indeed, 
on 
store 
store 
solution 
store 
class="n">x</span><span 
on 
class="n">x</span><span 
on 
store 
class="n">valuep</span> 
add 
This 
Kotz, 
on 
we 
we 
we 
we 
we 
we 
I 
I 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
we 
we 
I 
class="c1">// 
class="c1">// 
I 
I 
I 
I 
we 
we 
stores 
we 
I 
Engs50 
using 
want 
go 
these 
these 
just 
want 
want 
highlighter-rouge"><div 
function, 
highlighter-rouge"><div 
highlighter-rouge"><div 
function, 
highlighter-rouge"><div 
starts 
href="/engs50/Examples/names5.c">names5.c</a> 
“bag 
these 
maintainable, 
/> 
is 
a 
is 
structures’, 
is 
a 
a 
a 
none 
a 
a 
a 
a 
a 
is 
is 
a 
a 
a 
a 
a 
a 
a 
here, 
a 
a 
here, 
a 
here, 
a 
a 
print, 
a 
a 
a 
a 
is 
is 
a 
is 
a 
a 
a 
a 
a 
a 
a 
a 
a 
a 
is 
a 
a 
is 
a 
a 
a 
a 
a 
is 
a 
a 
is 
a 
is 
is 
a 
a 
a 
is 
http-equiv="X-UA-Compatible" 
reusable 
reusable 
module 
module 
module 
type.”</p> 
asked.</p> 
module 
module 
module 
files, 
module 
<p> 
<title>Modular 
<div 
<div 
class="post-title">Modular 
<div 
don’t 
<div 
noted 
help 
<div 
<div 
<div 
<li>The 
<li>The 
“a 
them!)</li> 
<div 
Zhou, 
large, 
class="post-content"> 
structures.</p> 
</ul> 
be 
we’d 
pointer 
pointer 
pointer 
pointer 
pointer 
pointer 
pointer 
pointer 
pointer 
pointer 
We 
pointer 
be 
pointer 
That 
class="highlighter-rouge">printf</code> 
pointer 
pointer 
pointer 
pointer 
follows:</p> 
pointer 
be 
pointer 
pointer 
be 
be 
be 
pointer 
pointer 
</ul> 
</ul> 
data 
href="/engs50/Examples/">Examples</a>] 
class="wrapper"> 
data 
data 
<h3 
data 
reuse</h2> 
data 
data 
<h3 
arbitary 
could 
<h3 
<em>pointer 
could 
data 
could 
could 
manipulate 
manipulate 
data 
data 
class="wrapper"> 
objects 
must 
objects 
objects 
must 
start 
class="highlighter-rouge">bagnode_new</code>).</li> 
class="site-title" 
href="/engs50/Resources/">Resources</a>] 
code 
code 
write 
code 
me 
class="k">sizeof</span><span 
code 
code 
b, 
examine.</p> 
variable 
variable 
try 
with 
with 
so 
so 
Today 
with 
when 
with 
class="n">xp</span> 
when 
when 
with 
when 
so 
so 
except 
so 
with 
<strong>2018-10-10</strong> 
</a> 
back 
have 
have 
refer 
have 
have 
<p>declares 
(like 
(like 
(like 
(like 
such 
or 
</span></code></pre></div></div> 
or 
helper 
or 
such 
or 
<em>extract</em> 
demonstrating</p> 
html> 
class="n">class</span> 
<p>A 
href="/engs50/Notes/modules/"> 
need 
derive 
need 
need 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
three 
quotes 
need 
content="IE=edge"> 
understandable 
queues, 
switch 
class="p">));</span> 
themselves, 
themselves, 
class="highlighter-rouge">myprint</code>, 
characters 
<link 
<link 
<link 
user’s 
<p>How 
hundreds 
Professors 
program 
program 
general-purpose 
program 
<p>For 
Palmer, 
indebted 
capabilities. 
thus 
caller 
functions</h3> 
caller 
caller 
caller 
thus 
class="site-nav"> 
href="/engs50/Notes/">Notes</a>] 
modules 
modules 
class="n">sp</span><span 
class="n">sp</span><span 
class="n">sp</span><span 
class="n">sp</span><span 
class="n">sp</span><span 
modules 
functions. 
"things" 
*valuep 
that 
that 
that 
that 
that 
that 
that 
(In 
that 
that 
that 
that 
that 
that 
that 
that 
that 
that 
that 
extend 
that 
that 
concepts 
id="pointers-to-anything">Pointers 
like 
like 
like 
like 
like 
like 
kit</a>.</p> 
educators. 
than 
fresh 
than 
anything”: 
an 
an 
<p>As 
an 
an 
class="highlighter-rouge">void</code>. 
notation. 
live-code 
an 
<li>typedefs 
an 
C.</li> 
demonstrating 
align=center 
through 
print 
print 
print 
print 
through 
things”.</p> 
- 
- 
class="highlighter-rouge">typedef</code>.</li> 
valuable 
some 
some 
some 
generic 
generic 
after 
id="another-example---binary-trees">Another 
Dartmouth 
<head> 
providing 
things; 
struct 
struct 
struct 
class="n">key</span><span 
class="n">key</span><span 
class="n">key</span><span 
get 
class="n">key</span><span 
first 
via 
first 
character; 
get 
via 
<p><small>This 
‘subclasses’ 
really 
needs 
updated 
pointers, 
memory. 
href="/engs50/Labs/Lab3/starter">Lab 
C</title> 
<code 
<code 
<code 
<code 
<code 
<code 
<p>Thus, 
<code 
<p>Thus, 
memory, 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
id="activity">Activity</h2> 
<img 
more 
more 
later, 
class="n">sp</span> 
heap 
support.)</p> 
class="highlighter-rouge">myprint</code> 
more 
trees 
<footer 
process 
code, 
flexible 
anything. 
anything. 
allocate 
customized 
class="n">house</span> 
class="n">item</span><span 
class="n">item</span><span 
class="n">item</span><span 
style 
<em>templates</em>. 
can’t 
class="highlighter-rouge">b</code>, 
href="/engs50/Examplespointer2.c}}">pointer2.c</a> 
integers 
parens, 
version 
one 
one 
bagnode_t</code>).</li> 
files.</li> 
bagnode_t</code>).</li> 
one 
version 
href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen 
name="viewport" 
class="n">anything</span> 
class="n">anything</span> 
class="n">anything</span> 
class="highlighter-rouge">printfunc</code>? 
content="width=device-width, 
alt="icon"> 
more-efficient 
can 
can 
approximate 
types 
special 
can 
can 
can 
dereference 
types 
types 
<li>Private 
types 
<li>Private 
track 
<a 
simple 
developing 
class="n">x</span> 
“things”. 
<a 
pretty 
<a 
goal 
<a 
<a 
<a 
<a 
<a 
</font> 
structures 
structures 
<li>General-purpose 
structures 
structures 
hash 
anything</h3> 
class="s">"West"</span><span 
addresses 
<p>If 
<p>If 
unordered 
</article> 
Code 
functions 
object-oriented 
our 
return 
object-oriented 
Java, 
address.</p> 
our 
functions 
derefs 
our 
shrinks 
return 
functions 
functions 
functions 
functions 
size=-1> 
</body> 
C 
scratch. 
‘data 
C 
id="pointers-to-functions">Pointers 
C 
takes 
C 
<p>We 
id="example---bags">Example 
item 
item 
item 
<p>We 
<p>We 
to 
to 
to 
to 
to 
(e.g., 
to 
to 
to 
to 
to 
to 
to 
able 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
whereas 
class="highlighter-rouge">c</code>. 
to 
to 
to 
to 
to 
whose 
to 
to 
to 
collection 
to 
to 
to 
to 
to 
to 
reminder 
to 
to 
to 
to 
to 
to 
result, 
to 
to 
focus 
of 
of 
of 
lists, 
business 
of 
of 
of 
of 
of 
of 
of 
of 
initialize 
of 
initialize 
class="n">name</span> 
initialize 
of 
of 
of 
of 
initialize 
class="n">printfunc</span> 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
software 
The 
may 
The 
may 
function.</p> 
calls 
function.</p> 
The 
things.</li> 
always 
<header 
<header 
example, 
example, 
its 
arrays 
example, 
“dictionary” 
href="/engs50/"> 
<p>The 
When 
int 
int 
above, 
<p>The 
above, 
<p>The 
class="highlighter-rouge">malloc</code> 
strings, 
<p>The 
(CS50) 
(as 
might 
class="highlighter-rouge">change</code> 
us 
prototype, 
useful, 
(CS50) 
</footer> 
purposes 
because 
rewriting 
because 
further 
<p>Java 
class="mi">42</span><span 
language, 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
<li>A 
<li>A 
class="site-footer"> 
build 
rel="canonical" 
program). 
they 
as 
as 
other 
accept 
other 
as 
other 
as 
time, 
as 
build 
build 
as 
as 
as 
as 
as 
other 
as 
counter 
</div> 
</div> 
</div> 
</div> 
design 
design 
files 
pointer, 
pointer, 
(items). 
demonstrates</p> 
avoid 
how 
(buggy) 
careful 
how 
how 
confusing. 
double 
do 
things 
things 
do 
compare 
passes 
called 
class="s">"(%s, 
class="p">}</span> 
series. 
class="highlighter-rouge">bag_new</code>).</li> 
types.</li> 
</header> 
</header> 
logic).</p> 
“things” 
...initialize 
...initialize 
“things” 
class="n">myprint</span><span 
class="highlighter-rouge">(*printfunc)</code>.</p> 
set 
set 
bag_t</code>) 
global 
https://thayer.github.io/engs50/Notes/modules/ 2 15384 
<li>Understanding 
good 
class="s">"David"</span><span 
function’s 
class="highlighter-rouge">main</code> 
class="p">{</span> 
included 
rel="shortcut 
trees, 
Many 
variants 
design.</p> 
remember; 
“pointer 
class="kt">int</span> 
address. 
passed 
class="kt">int</span> 
represent 
passed 
class="highlighter-rouge">struct 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlighter-rouge">struct 
class="highlighter-rouge">struct 
constant 
constant 
class="highlighter-rouge">struct 
class="highlighter-rouge">struct 
class="footer-heading">Engs50 
<strong>18:07</strong>.</small></p> 
(or 
function 
function 
function 
function 
is, 
function 
function 
function 
function 
function 
function 
is, 
function 
function 
example 
example 
<li>a 
example 
trees</h2> 
is, 
base 
pointers 
things, 
things, 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
char 
</span><span 
</span><span 
</span><span 
pointers 
will 
will 
re-use 
re-use 
class="k">struct</span> 
class="k">struct</span> 
will 
<em>class</em> 
variables. 
binary 
binary 
designed 
Taylor</a> 
‘class’ 
class.</p> 
does 
at 
module’s 
at 
arguments 
arguments 
at 
at 
at 
charset="utf-8"> 
content="In 
reliable, 
Unix 
<li>Reiterating 
<li>Reiterating 
if 
‘instances’ 
For 
declare 
For 
you 
you 
href="/engs50/css/main.css"> 
href="/engs50/Reading/">Reading</a>] 
enable 
class="highlighter-rouge">struct</code> 
<h2 
you 
you 
you 
you 
you 
you 
you 
you 
class="o">*</span><span 
class="o">*</span><span 
class="mi">1986</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
<h2 
<h2 
<h2 
<h2 
rel="stylesheet" 
class 
programs 
predetermined 
class="n">student</span> 
c)</code> 
items. 
<li>structure 
class="highlighter-rouge">char*</code> 
module</a>.</p> 
today’s 
class 
<p>In 
them 
your 
make 
make 
<p>In 
module, 
instead 
things</em>, 
“I 
them 
module, 
<p>In 
make 
href="/engs50/Examples/names9.c">names9.c</a>.</p> 
<p>In 
and 
development 
and 
and 
and 
tables 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
and 
and 
and 
and 
and 
and 
and 
class="n">thing</span><span 
and 
and 
and 
and 
empty, 
and 
empty, 
and 
and 
and 
and 
and 
and 
and 
complex 
and 
