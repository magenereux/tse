tools. 
<body> 
class="post-header"> 
all 
all 
are 
all 
all 
all 
all 
class="p">()</span> 
are 
are 
are 
are 
are 
all 
are 
are 
are 
all 
</code>. 
are 
class="highlighter-rouge">fgetc</code>).</p> 
selects 
are 
are 
all 
href="/engs50/Notes/memory/"> 
id="goals">Goals</h3> 
information 
class="kt">int</span><span 
zero 
call 
allocated, 
call 
call 
library, 
tries 
page 
linear 
<p>Given 
linear 
before 
begins 
constants 
before 
constants 
my 
<p>Today 
class="highlighter-rouge">ps 
class="kt">float</span> 
class="n">error_count</span> 
time.</p> 
chunks 
chunks 
chunks 
should 
href="/engs50/Examples/pointer3.c">pointer3.c</a></li> 
stack 
stack 
stack 
another 
another 
stack 
another 
another 
stack 
syntactically 
another 
stack 
stack 
third 
looks 
href="/engs50/Examples/pointer0.c">pointer0.c</a></li> 
numbers 
operator 
operator 
reading 
reading 
To 
‘static’) 
by 
id="the-heap-dynamically-allocated-memory">The 
by 
by 
by 
by 
by 
Campbell, 
href="/engs50/50.png" 
‘segmentation 
defined 
defined 
defined 
defined 
defined 
defined 
In 
[<a 
href="/engs50/Labs/">Labs</a>] 
[<a 
[<a 
[<a 
[<a 
In 
class="o">=</span> 
class="o">=</span> 
id="three-regions-of-data-memory">Three 
class="o">=</span> 
class="o">=</span> 
class="mi">0</span><span 
chunk 
chunk 
definition 
chunk 
(you 
chunk 
chunk 
chunk 
<li><code 
<li><code 
<li><code 
<li><code 
<font 
</p> 
name="description" 
in 
"> 
in 
in 
bytes, 
<em>address</em>.</li> 
in 
explain 
somewhere 
in 
bytes, 
in 
in 
in 
in 
in 
somewhere 
in 
differently. 
in 
in 
in 
in 
particular 
in 
in 
in 
in 
College</h2> 
last 
class="site-header"> 
from 
from 
from 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="highlighter-rouge">x</code> 
class="highlighter-rouge">x</code> 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
Fun!</p> 
recognize 
begin 
since 
class="language-c 
storage</em> 
class="language-c 
storage</em> 
class="highlighter-rouge">free(p)</code> 
shrinks) 
class="highlighter-rouge">free(p)</code> 
stored 
stored 
stored.</p> 
class="highlighter-rouge">malloc</code>. 
icon" 
href="/engs50/Examples/pointer2.c">pointer2.c</a></li> 
x00000 
name 
class="kt">char</span> 
dog 
mapfile] 
their 
their 
their 
no 
procedural 
own 
practice, 
segment</em>).</p> 
definitions.</p> 
<html> 
<meta 
<meta 
<meta 
<meta 
used 
it 
it 
it 
it 
it 
it 
it 
used 
it 
it 
it 
it 
it 
class="highlighter-rouge">malloc()</code>. 
doing 
allocation 
numbered 
numbered 
FFFFF. 
read 
read 
data) 
based 
<!DOCTYPE 
the 
<nav 
the 
the 
today 
for 
the 
for 
the 
the 
the 
the 
the 
address 
the 
way, 
the 
address 
for 
for 
for 
for 
*p=NULL; 
the 
the 
<em>all</em> 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
address 
the 
the 
the 
variables, 
the 
the 
across 
the 
the 
We’ll 
the 
the 
the 
the 
for 
the 
the 
for 
the 
the 
the 
the 
the 
variables, 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
(out 
the 
for 
the 
the 
the 
chunk. 
the 
the 
free 
the 
for 
the 
the 
the 
for 
the 
the 
string 
the 
<ul> 
<ul> 
processor 
(aka 
they’re 
(aka 
<ul> 
C: 
have</p> 
<ul> 
<p>Think 
<ul> 
understand 
understand 
understand 
= 
= 
= 
= 
segments 
heap) 
upon 
deeply 
several 
class="highlighter-rouge">&amp;</code> 
reused, 
<h1 
memory 
memory 
<h1 
memory 
memory 
megabyte 
rather 
memory 
memory 
processes, 
memory 
memory 
memory 
has</p> 
<em>It 
memory 
allocated. 
memory 
memory 
memory 
allocated. 
memory</li> 
memory</li> 
memory 
memory 
memory 
memory 
those 
languages 
syntax 
<em>code 
regions 
regions 
define 
‘static’).</li> 
[-] 
Stack 
region, 
programmer’s 
leak.’) 
programmer’s 
multiple 
bytes.</li> 
course 
byte 
slides 
slides 
byte 
<p>By 
list 
which 
class="n">usage</span><span 
which 
which 
class="highlighter-rouge">#include</code> 
include 
which 
which 
numeric 
numeric 
class="highlight"><code><span 
<p>C 
class="highlight"><code><span 
class="p">.</span><span 
out 
crashes.</p> 
future 
out 
src="/engs50/50.png" 
<li>to 
<li>to 
<li>to 
<li>to 
close 
returns 
languages, 
class. 
initialized 
scope</em> 
class="o">=</span><span 
declared 
scope</em> 
instance 
within 
system, 
<em>text 
<p>Let’s 
within 
class="s">"</span><span 
within 
within 
within 
within 
not 
within 
not 
not 
</head> 
</nav> 
nearly 
has 
has 
data, 
starts, 
pushed 
It 
It 
It 
It 
outstanding 
class="page-content"> 
class="post"> 
You 
writing 
class="highlighter-rouge">char 
region 
region 
region 
any 
any 
any 
Local 
<em>pops 
region 
related 
Engs 
learn 
learn 
learn 
class="o">*</span> 
class="highlighter-rouge">NULL</code> 
type 
There’s 
nothing 
throughout 
class="highlighter-rouge">fgetc</code> 
unused 
calling 
initial-scale=1"> 
whether 
,048,575. 
class="p">;</span> 
class="p">;</span> 
but 
class="n">pi</span><span 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
above 
declaration. 
but 
but 
hold 
hold 
hold 
Balkcom. 
& 
this 
c 
execute 
<li><em>local 
this 
this 
scope), 
this 
was 
malloc</title> 
width=48 
use 
use 
-> 
-> 
every 
use 
use 
use 
systems. 
bit 
simply 
see 
see 
static)</h3> 
am 
</html> 
<article 
areas 
id="slides-and-examples">Slides 
null 
current 
latter 
extensive 
returns, 
returns, 
longer 
Indeed, 
free. 
to, 
<p>To 
(in 
class="n">x</span><span 
on 
This 
on 
call.</li> 
on 
This 
on 
on 
on 
on 
corrupt 
releases 
This 
Kotz, 
on 
[script](/engs50/Notes/memory/script.txt) 
stores 
I 
we 
we 
we 
stores 
we 
also 
I 
Engs50 
C, 
these 
bytes 
bytes 
highlighter-rouge"><div 
<em>process</em> 
bytes 
function, 
highlighter-rouge"><div 
kinds 
these 
works. 
bytes 
‘stack 
these 
function, 
bytes 
bytes 
just 
function, 
bytes 
times 
bytes 
bytes 
id="on-exit">On 
these 
maintainable, 
/> 
a 
solutions 
today's 
is 
is 
a 
a 
a 
is 
a 
we’re 
hexadecimal 
hexadecimal 
a 
a 
is 
is 
a 
is 
is 
is 
illegal 
a 
a 
program, 
a 
a 
is 
is 
is 
a 
is 
is 
a 
is 
a 
a 
is 
a 
a 
is 
a 
a 
is 
a 
is 
is 
is 
a 
class="highlighter-rouge">malloc()</code> 
a 
a 
is 
is 
a 
is 
a 
is 
size)</code> 
is 
a 
is 
a 
is 
a 
a 
a 
is 
http-equiv="X-UA-Compatible" 
computer 
computer 
computer 
second 
class="nf">main</span><span 
<p> 
<div 
<div 
<div 
<div 
example,</p> 
<div 
class="mi">1415926535</span><span 
declares 
situation 
<div 
Zhou, 
large, 
class="post-content"> 
</ul> 
</ul> 
be 
be 
pointer 
pointer 
be 
pointer 
</ul> 
be 
functions.</p> 
</ul> 
pointer 
pointer 
be 
be 
n)</code> 
pointer 
pointer 
</ul> 
href="/engs50/Examples/">Examples</a>] 
class="wrapper"> 
underly 
<h3 
data 
data 
<h3 
examples:</p> 
id="memory-and-addresses">Memory, 
data 
data 
<h3 
data 
data 
<h3 
could 
<h3 
data 
<h3 
<h3 
class="wrapper"> 
must 
catch 
<li><em>global 
[-n] 
carefully, 
frame’. 
must 
(dynamically 
href="activity.html">activity</a> 
class="site-title" 
href="/engs50/Resources/">Resources</a>] 
dereferencing.</li> 
tend 
write 
variable 
variable 
try 
becomes 
try 
code 
memory</h2> 
variable 
code 
code 
variable 
variable 
either 
variable 
code 
<title>Memory, 
with 
with 
dynamic 
with 
class="n">xp</span> 
so 
class="highlighter-rouge">ps</code> 
so 
All 
so 
when 
stack</em>) 
when 
pointer; 
so 
find 
<strong>2018-10-10</strong> 
</a> 
examples</h3> 
run 
storage, 
have 
have 
run 
four 
four 
or 
complementing 
or 
or 
or 
</blockquote> 
or 
or 
class="k">const</span> 
class="k">const</span> 
or 
class="highlighter-rouge">readline</code> 
class="highlighter-rouge">readline</code> 
Each 
keeps 
calloc(count, 
released 
<p>Today’s 
html> 
particular, 
each 
differently.</li> 
each 
xFFFFF.</p> 
each 
each 
each 
responsibility 
responsibility 
need 
href="/engs50/Notes/memory/memory-pointers-C.key">Keynote</a> 
three 
three 
<em>segments</em>). 
three 
class="highlighter-rouge">free</code>, 
pointers</a>. 
content="IE=edge"> 
understandable 
distinct 
ok.) 
former 
<link 
<link 
<link 
segments.</p> 
‘global’ 
‘global’ 
<p>All 
<em>pushes 
(code, 
Professors 
program 
program 
<em>address</em>. 
<p>When 
program 
program 
program 
<p>For 
Well-modularized 
program 
program 
program 
<p>When 
program 
Palmer, 
indebted 
started 
addresses, 
addresses, 
Global 
<p>Global 
stack</em>. 
kind 
large 
class="site-nav"> 
href="/engs50/Notes/">Notes</a>] 
sequence 
sequence 
OS 
OS 
sequence 
and</li> 
below 
and</li> 
that 
that 
that 
that 
addresses</h1> 
that 
that 
that 
that 
that 
that 
that 
that 
that 
that 
class="highlighter-rouge">p</code> 
that 
class="highlighter-rouge">p</code> 
class="highlighter-rouge">p</code> 
that 
portion 
that 
bug.</p> 
concepts 
explanation 
educators. 
than 
an 
an 
realloc(p, 
align=center 
<!-- 
<!-- 
initializes 
contents) 
class="se">\n</span><span 
- 
- 
some 
meaning 
meaning 
class="s">"Usage: 
sometimes 
we’ve 
meaning 
meaning 
class="highlighter-rouge">fgetc</code>. 
variables 
variables 
after 
variables 
among 
variables 
variables 
variables 
variables 
variables 
stack. 
variables 
lead 
Dartmouth 
arranges 
Unix. 
disappear.</p> 
<head> 
about 
Or, 
get 
first 
Your 
about 
about 
global, 
<p><small>This 
needs 
manipulates 
allocates 
top 
allocates 
allocates 
allocates 
allocates 
allocates 
expands 
updated 
pointers, 
pointers, 
pointers, 
memory. 
pointers, 
pointers, 
reference 
ax</code>.) 
copied 
<li><em>static 
local 
local 
only, 
local 
up 
Terminal 
memory, 
memory</em>, 
memory, 
memory, 
<code 
of…”.</p> 
<code 
<code 
<code 
<code 
<code 
<code 
bash 
commandline. 
<code 
visible 
(and 
visible 
<code 
visible 
frame 
<code 
<code 
<code 
frame 
<code 
<code 
<code 
frame 
<code 
<code 
frame 
<code 
frame 
<code 
<code 
<code 
<code 
class="highlighter-rouge">printf</code>, 
frame 
<code 
class="highlighter-rouge">printf</code>, 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<img 
though 
often 
necessary, 
more 
later, 
Heap 
heap 
heap 
heap 
heap 
heap 
heap 
<footer 
process 
bytes</em> 
process 
one 
one 
id="global-memory-aka-static">Global 
live. 
one 
style 
version 
href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen 
name="viewport" 
discuss 
id="the-stack-for-local-variables">The 
<p><strong>Note:</strong> 
pushes 
</code> 
re-using 
allocated 
</code> 
allocated 
class="highlighter-rouge">free</code> 
content="width=device-width, 
alt="icon"> 
^20 
can 
dereference 
can 
special 
look 
(hence 
can 
variables; 
forgets 
can 
<a 
malloc</h1> 
<a 
<a 
class="n">x</span> 
class="highlighter-rouge">count*size</code> 
<a 
<a 
<a 
</font> 
https://thayer.github.io/engs50/Notes/memory/ 2 13519 
brief 
writing, 
it’s 
[filename]...</span><span 
differences 
Later, 
returned 
understand:</p> 
</article> 
decimal; 
<blockquote> 
*p;</code>) 
functions 
makes 
inaccessible 
return 
functions 
size=-1> 
</body> 
C 
C 
](/engs50/Labs/Lab2)***. 
C 
C 
C 
C 
C 
C 
C 
C 
C 
C 
C 
These 
<li><a 
<li><a 
<li><a 
<li><a 
“address 
segment 
(think 
never 
class="mi">3</span><span 
class="highlighter-rouge">readline</code>, 
never 
class="highlighter-rouge">p 
class="highlighter-rouge">p 
class="highlighter-rouge">p 
to 
to 
to 
to 
to 
computer’s 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
variable. 
to 
directives 
to 
to 
(for 
far 
to 
to 
to 
to 
to 
to 
to 
memory)</h3> 
to 
to 
to 
to 
to 
to 
malloc(n)</code> 
to 
to 
to 
copies 
to 
to 
class="post-title">Memory, 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
focus 
of 
of 
of 
of 
of 
of 
two 
of 
of 
of 
handy, 
of 
two 
of 
dangerous. 
of 
of 
of 
of 
initialize 
initialize 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
href="https://www.youtube.com/watch?v=5VnDaHBi8dM">animated 
of 
of 
software 
details.</p> 
The 
The 
The 
The 
trigger 
always 
program. 
The 
parameters.</p> 
calls 
calls 
The 
calls 
had 
(This 
may 
<header 
<header 
its 
instructions 
its 
notation: 
its 
(0x00000). 
executable 
instructions 
its 
its 
its 
href="/engs50/"> 
cover 
<p>The 
<p>The 
<p>The 
seen 
When 
When 
When 
When 
<p>The 
class="highlighter-rouge">malloc</code> 
(CS50) 
might 
(To 
segment</em> 
class="highlighter-rouge">main</code>. 
say, 
say, 
say, 
use.</li> 
(CS50) 
</footer> 
<em>four 
class="mi">42</span><span 
</code></pre></div></div> 
where 
where 
</code></pre></div></div> 
keep 
reasonable, 
<li><em>stack 
pops 
where 
where 
where 
class="site-footer"> 
build 
rel="canonical" 
as 
other 
records 
records 
</div> 
</div> 
</div> 
</div> 
design 
notes 
^20-1, 
them. 
avoid 
files 
been 
“heap”. 
been 
how 
how 
integer. 
outside 
file, 
file, 
file, 
how 
careful 
likely 
explore 
called 
simplest 
called 
class="p">}</span> 
called 
called 
eventually, 
called 
</header> 
</header> 
same 
set 
fault’.</p> 
Let’s 
global 
global 
global 
global 
global 
class="highlighter-rouge">fgetc</code>, 
same 
same 
below. 
work 
class="highlighter-rouge">xp</code> 
turn.</p> 
class="p">{</span> 
good 
function’s 
class="highlighter-rouge">main</code> 
class="highlighter-rouge">readline 
stack, 
off 
off 
class="highlighter-rouge">readline 
class="highlighter-rouge">main</code> 
class="highlighter-rouge">main</code> 
class="highlighter-rouge">readline 
exits, 
stack, 
rel="shortcut 
[Lab 
variable, 
address. 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
(Global 
‘memory 
running 
class="highlight"><pre 
processes 
running 
constant 
class="highlight"><pre 
generally 
programmer 
memory-allocation 
class="footer-heading">Engs50 
<strong>18:07</strong>.</small></p> 
allocation.</li> 
href="/engs50/Examples/pointer1.c">pointer1.c</a></li> 
If 
is, 
(or 
If 
function 
class="p">...</span> 
function 
(or 
example 
function 
function 
function 
If 
class="highlighter-rouge">n</code> 
(or 
class="highlighter-rouge">n</code> 
truly 
***We 
href="/engs50/Notes/memory/memory-pointers-C.pdf">PDF</a>) 
char 
program’s 
into 
live 
change 
[-m 
pointers 
will 
will 
demo 
will 
will 
will 
class="p">[]</span> 
variables. 
variables)</h3> 
earlier 
eventually 
will 
will 
designed 
Taylor</a> 
<p>Every 
at 
manages 
at 
at 
passing 
<p>There 
does 
follow. 
<p>There 
exit</h3> 
at 
at 
charset="utf-8"> 
content="In 
reliable, 
Unix 
data. 
integer, 
if 
execution 
if 
if 
kept 
you 
you 
href="/engs50/css/main.css"> 
href="/engs50/Reading/">Reading</a>] 
you 
you 
you 
<h2 
you 
space 
executing; 
space 
you 
<h2 
rel="stylesheet" 
programs 
programs 
id="activity">Activity</h3> 
scientists, 
your 
your 
your 
and 
and 
development 
and 
and 
and 
and 
managed 
and 
and 
and 
and 
class="o">&amp;</span><span 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
managed 
and 
and 
and 
and 
<p>Check 
and 
and 
and 
