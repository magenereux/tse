tools. 
<body> 
class="post-header"> 
are 
are 
are 
all 
are 
are 
are 
are 
functions:</p> 
‘address’ 
are 
mistake. 
are 
interest.</p> 
there 
class="p">()</span> 
there 
there 
there 
are 
there 
there 
there 
are 
all 
are 
are 
are 
all 
are 
there 
there 
there 
there 
there 
there 
there 
there 
are 
message:</p> 
class="n">sort</span> 
selects 
selects 
class="highlight"><code> 
class="p">,</span> 
what 
class="highlight"><code> 
class="highlight"><code> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
parentheses 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
until 
class="highlight"><code> 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
page 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
information 
class="highlighter-rouge">gets()</code>.</em></p> 
</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
%d 
class="p">,</span> 
%d 
class="p">,</span> 
class="p">,</span> 
%d 
class="p">,</span> 
%d 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
%d 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
safer 
class="highlight"><code> 
class="highlight"><code> 
know 
until 
function. 
class="highlight"><code> 
class="p">,</span> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
until 
know 
class="highlight"><code> 
class="p">,</span> 
class="highlight"><code> 
class="p">,</span> 
line. 
</span> 
class="p">,</span> 
class="p">,</span> 
%d 
class="p">,</span> 
class="p">,</span> 
</span> 
class="p">,</span> 
%d 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
</span>argv[2] 
class="highlight"><code> 
class="highlight"><code> 
class="highlight"><code> 
class="highlight"><code> 
</span> 
</span> 
</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
</span> 
</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
</span> 
</span> 
&lt;unistd.h&gt; 
know 
</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="n">ch</span><span 
</span> 
</span> 
class="p">,</span> 
class="p">,</span> 
class="n">ch</span><span 
</span> 
class="p">,</span> 
class="n">ch</span><span 
class="p">,</span> 
class="n">ch</span><span 
class="p">,</span> 
class="n">ch</span><span 
class="p">,</span> 
class="n">ch</span><span 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
class="p">,</span> 
</span> 
page 
&lt;stdio.h&gt; 
<p>NOTE: 
&lt;stdio.h&gt; 
class="n">message</span> 
embeds 
being 
(a 
constants 
&lt;stdio.h&gt; 
chars 
&lt;stdio.h&gt; 
string1"</span><span 
unsafe. 
</span>entering 
</span>entering 
chars 
long 
chars 
Just 
identify 
identify 
class="highlighter-rouge">*</code>, 
char</em>.</p> 
&lt;stdio.h&gt; 
string.</p> 
ready 
class="highlighter-rouge">getopt()</code> 
class="o">!=</span> 
class="p">{</span><span 
should 
class="n">fclose</span><span 
pointer’ 
<p>Some 
should 
class="n">fclose</span><span 
left-hand-side 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="n">fclose</span><span 
class="n">fclose</span><span 
<p>Here 
dangerous 
dangerous 
class="p">[</span><span 
class="p">[</span><span 
characters: 
fgets(string2, 
characters: 
characters: 
dangerous 
bug; 
<p>Some 
prototype 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="p">[</span><span 
class="s">"numsort=%d, 
class="p">[</span><span 
class="s">"numsort=%d, 
unlike 
even 
class="n">error</span> 
another 
<p>like 
various 
another 
Lots 
even 
prefer 
(after 
looks 
class="sc">'-'</span><span 
by 
hard 
by 
by 
class="n">sscanf</span><span 
.5) 
Segmentation 
by 
by 
yes, 
by 
remember 
by 
operator 
operator 
operator 
by 
class="highlighter-rouge">argv[i]</code> 
class="highlighter-rouge">argv[i]</code> 
skating? 
class="o">&gt;</span> 
class="k">case</span> 
%c</span><span 
class="k">case</span> 
%c</span><span 
class="k">case</span> 
%c</span><span 
function! 
class="k">case</span> 
%c</span><span 
class="k">case</span> 
%c</span><span 
class="k">case</span> 
%c</span><span 
by 
Campbell, 
href="/engs50/50.png" 
class="cp">#include 
preprocessor 
preprocessor 
class="cp">#include 
combined. 
defined 
class="cp">#include 
href="/engs50/Examples/files.c">files.c</a> 
class="cp">#include 
&lt;string.h&gt; 
class="cp">#define 
class="s">"%s</span><span 
class="s">"%s</span><span 
user 
affect 
NULL 
class="cp">#include 
char</em>. 
class="cp">#include 
too.</p> 
</span>argv[1] 
user 
user 
class="n">reverse</span> 
class="o">--</span><span 
pointers.</li> 
class="n">reverse</span> 
In 
[<a 
href="/engs50/Labs/">Labs</a>] 
[<a 
[<a 
[<a 
[<a 
class="o">=</span> 
executed 
given 
appropriate) 
class="highlighter-rouge">if</code> 
value 
value 
value 
class="highlighter-rouge">if</code> 
class="highlighter-rouge">if</code> 
frequent 
class="o">=</span> 
class="o">=</span> 
array 
class="o">=</span> 
class="o">=</span> 
class="mi">0</span><span 
class="o">=</span> 
class="mi">0</span><span 
array 
array 
fun. 
fun. 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="mi">0</span><span 
class="mi">0</span><span 
greater 
In 
In 
value 
class="mi">0</span><span 
value 
value 
value 
array 
array 
array 
array 
array 
In 
array 
array 
class="o">=</span> 
class="mi">0</span><span 
given 
class="o">=</span> 
class="mi">0</span><span 
class="mi">0</span><span 
class="highlighter-rouge">sort</code> 
class="o">=</span> 
class="mi">0</span><span 
class="o">=</span> 
class="mi">0</span><span 
class="mi">0</span><span 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="mi">0</span><span 
In 
array 
parse 
class="o">=</span> 
class="mi">0</span><span 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="o">=</span> 
class="nl">default:</span> 
class="mi">0</span><span 
<font 
</p> 
name="description" 
in 
"> 
in 
particular 
in 
system 
in 
in 
in 
in 
in 
in 
in 
in 
in 
class="n">fflush</span><span 
in 
in 
in 
particular 
in 
system 
line 
full 
in 
): 
saying 
in 
class="p">]</span> 
class="p">]</span> 
class="n">n</span><span 
line 
in 
line 
line 
in 
in 
in 
in 
characters, 
characters, 
piece 
in 
in 
in 
in 
class="n">buf</span><span 
class="n">buf</span><span 
in 
in 
in 
system 
in 
lists 
shell).</p> 
line 
in 
in 
line 
in 
parses 
line 
line 
class="n">unique</span> 
class="p">]</span> 
class="n">unique</span> 
in 
in 
in 
in 
parses 
class="n">unique</span> 
College</h2> 
last 
href="/engs50/Notes/c2/extra.html"> 
class="site-header"> 
“lecture 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
whole, 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
characters).</p> 
buffer 
buffer 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
Some 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
from 
But 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
characters.</p> 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
Some 
buffer 
from 
from 
But 
past 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
buffer 
<span 
<span 
<span 
from 
from 
But 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
%p</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
See 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="language-c 
class="language-c 
status 
class="language-c 
class="language-c 
class="language-c 
class="language-c 
class="language-c 
preceded 
actually 
class="language-c 
class="language-c 
class="language-c 
class="language-c 
class="language-c 
class="highlighter-rouge">printf()</code>, 
<em>never 
class="language-c 
class="k">return</span> 
segmentation 
class="language-c 
class="language-c 
hit 
class="language-c 
class="language-c 
halfway 
class="language-c 
class="language-c 
class="k">return</span> 
class="language-c 
class="language-c 
class="language-c 
class="o">/</span> 
[-r] 
class="language-c 
[-r] 
Instead 
conditional 
frequently 
class="s">"%d 
class="s">"%d 
entering 
entering 
impossible 
everything 
class="s">"%d 
stored 
stored 
stored 
note 
stored 
stored 
stored 
stored 
stored 
stored 
stored 
switches 
switches 
switches 
switches 
switches 
icon" 
class="kt">char</span> 
class="kt">char</span> 
class="kt">char</span> 
their 
very 
class="kt">char</span> 
class="kt">char</span> 
class="kt">char</span> 
class="kt">char</span> 
USE 
class="kt">char</span> 
class="kt">char</span> 
name 
no 
class="kt">char</span> 
class="kt">char</span> 
Take 
no 
class="kt">char</span> 
class="kt">char</span> 
precedence 
precedence 
precedence 
name 
class="kt">char</span> 
class="highlighter-rouge">argv</code> 
class="kt">char</span> 
class="kt">char</span> 
class="kt">char</span> 
class="highlighter-rouge">case</code> 
<li>Note: 
class="highlighter-rouge">argv</code> 
<li>Note: 
class="highlighter-rouge">argv</code> 
class="kt">char</span> 
class="kt">char</span> 
class="kt">char</span> 
class="kt">FILE</span> 
class="kt">FILE</span> 
class="kt">FILE</span> 
items 
bad 
bad 
unsafe 
class="kt">FILE</span> 
class="highlighter-rouge">fgets</code> 
time 
items 
items 
location 
items 
items 
</span>argv[4] 
bad 
bad 
bad 
time 
bad 
<html> 
<meta 
<meta 
<meta 
<meta 
own. 
contents 
it 
it 
used 
it 
used 
it 
it 
alert! 
used 
contents 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
%s</span><span 
%s</span><span 
%s</span><span 
%s</span><span 
Please 
Please 
it 
it 
later 
it 
it 
it 
Unix, 
it 
class="n">i</span><span 
class="n">i</span><span 
%s</span><span 
class="n">i</span><span 
class="n">i</span><span 
it 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
class="n">i</span><span 
href="/engs50/Examples/nosort.c">nosort.c</a></em></strong></p> 
it 
assignment 
assignment 
assignment 
Here 
MAXLINE 
read 
snippet 
named 
class="language-bash 
class="language-bash 
Buffer 
that, 
Its 
read 
read 
read 
<p>I 
read 
class="n">i</span> 
class="n">i</span> 
class="language-bash 
snippet 
class="n">i</span> 
class="n">i</span> 
class="language-bash 
class="language-bash 
class="p">][</span><span 
class="p">][</span><span 
class="p">][</span><span 
class="p">][</span><span 
class="p">][</span><span 
class="p">][</span><span 
based 
<!DOCTYPE 
the 
<nav 
the 
the 
the 
the 
the 
the 
the 
the 
the 
We’ll 
the 
the 
the 
for 
the 
the 
for 
for 
example:</p> 
the 
the 
the 
the 
the 
the 
the 
left-hand 
the 
the 
the 
the 
the 
the 
the 
the 
way, 
for 
string 
the 
the 
for 
for 
for 
for 
the 
the 
the 
the 
class="highlighter-rouge">FILE</code> 
the 
the 
the 
the 
the 
the 
class="highlighter-rouge">FILE</code> 
the 
class="highlighter-rouge">FILE</code> 
the 
the 
class="highlighter-rouge">FILE</code> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
class="highlighter-rouge">gets()</code> 
for 
the 
the 
the 
string 
the 
the 
the 
for 
the 
string 
class="k">if</span> 
class="k">if</span> 
concatenation, 
the 
string 
string 
for 
the 
the 
the 
the 
for 
the 
string 
address 
the 
string 
address 
the 
string 
the 
the 
class="highlighter-rouge">gets()</code> 
the 
the 
class="highlighter-rouge">gets()</code> 
concatenation, 
the 
string 
string 
concatenation, 
the 
string 
string 
the 
string 
address 
the 
string 
address 
the 
string 
the 
the 
the 
the 
the 
class="highlighter-rouge">gets()</code> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
class="highlighter-rouge">gets()</code> 
the 
the 
the 
the 
the 
the 
string 
class="highlighter-rouge">gets()</code> 
the 
safe.</p> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
string 
the 
address 
the 
the 
for 
string 
the 
the 
the 
address 
the 
the 
the 
address 
the 
for 
the 
address 
address 
address 
class="s2">"ready"</span><span 
address 
address 
address 
address 
the 
the 
for 
the 
the 
the 
the 
the 
for 
the 
the 
for 
the 
the 
the 
the 
the 
address 
the 
the 
the 
address 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
Clearly 
class="highlighter-rouge">stdio.h</code> 
class="p">(</span><span 
class="p">(</span><span 
(aka 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
number 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
headaches 
number 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
over 
(aka 
strcat() 
NO! 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
thing 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
class="s1">'s'</span> 
class="n">input</span> 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
number 
class="p">(</span><span 
stepping 
<ul> 
<ul> 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
class="p">(</span><span 
akin 
testing 
class="highlighter-rouge">gets()</code>, 
World!"</span><span 
class="highlighter-rouge">gets()</code>, 
class="highlighter-rouge">gets()</code>, 
modifying 
prints 
class="highlighter-rouge">argv[1]</code> 
way 
way 
upon 
deeply 
complement 
class="highlighter-rouge">&amp;</code> 
C" 
class="nv">$ 
class="nv">$ 
alone.</p> 
count 
About 
snippet:</p> 
class="nv">$ 
<p>Lets 
snippet:</p> 
class="nv">$ 
class="s1">'c'</span> 
class="s2">"go"</span><span 
several 
<h1 
by) 
id="the-standard-io-library">The 
nor 
class="n">class</span><span 
class="n">class</span><span 
those 
(Bronson) 
rather 
those 
memory 
class="o">-</span><span 
class="o">-</span><span 
class="o">-</span><span 
class="o">-</span><span 
class="o">-</span><span 
class="o">-</span><span 
class="o">-</span><span 
two-dimensional 
two-dimensional 
class="o">-</span><span 
those 
define 
file 
output. 
file 
Java’s 
file 
opened 
file 
file 
file 
file 
Java’s 
file 
values 
values 
file 
values 
file 
values 
class="k">for</span><span 
file 
file 
copying 
copying 
declaration 
process:</p> 
href="/engs50/Examples/nosort.c">nosort.c</a> 
syntax 
specifically 
course 
<title>Lecture 
Libraries</title> 
include 
line:</p> 
class="highlighter-rouge">#include</code> 
include 
which 
which 
class="p">)</span> 
class="p">)</span> 
class="p">)</span> 
class="p">)</span> 
which 
which 
which 
still 
exits.</p> 
which 
class="n">res</span><span 
class="n">res</span><span 
class="n">res</span><span 
include 
class="s">"thefile"</span><span 
class="p">)</span> 
class="p">)</span> 
class="p">)</span> 
class="highlighter-rouge">sscanf()</code>, 
which 
class="p">)</span> 
class="p">)</span> 
class="s">"Thanks 
which 
<p>This 
which 
which 
apparent 
<p>So 
list 
class="p">)</span> 
F 
class="p">)</span> 
class="s2">"./command"</span><span 
activity 
list 
which 
class="p">)</span> 
which 
amount 
multi-dimensional 
which 
which 
include 
class="p">)</span> 
class="p">)</span> 
provide 
provide 
<p>C 
class="highlight"><code><span 
<p>Several 
comparison 
common 
screen:</p> 
class="highlight"><code><span 
class="highlight"><code><span 
strings 
out 
strings 
strings 
strings 
out 
highest 
highest 
out 
class="highlight"><code><span 
class="o">++</span><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="o">++</span><span 
out 
class="highlight"><code><span 
common 
class="o">++</span><span 
common 
class="highlight"><code><span 
src="/engs50/50.png" 
stream. 
class="highlighter-rouge">stdin</code>, 
(by 
<p>but 
receiving 
class="n">arg2</span><span 
class="n">arg2</span><span 
couple 
buffer-overflow.c 
overwrite 
stream. 
shows 
class="o">=</span><span 
class="o">=</span><span 
class="p">...);</span> 
class="highlighter-rouge">toString</code> 
means 
class="p">...);</span> 
class="o">=</span><span 
class="o">=</span><span 
later). 
<em>which 
parameters 
e"</span> 
declared 
class="s2">"cs50"</span><span 
x7fff5d056386 
parameters 
class="o">=</span><span 
class="o">=</span><span 
getopt 
not 
style.”</em></strong></p> 
not 
not 
class="s">"</span><span 
within 
not 
class="s">"</span><span 
this:</p> 
non-zero 
class="n">sum</span> 
class="n">sum</span> 
not 
<p>Let’s 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
starting 
class="s">"</span><span 
class="s">"</span><span 
starting 
class="s">"</span><span 
<p>Let’s 
starting 
starting 
not 
not 
scanning 
not 
not 
not 
not 
starting 
this:</p> 
class="s">"</span><span 
class="s">"</span><span 
class="highlighter-rouge">argv[]</code> 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
not:</p> 
this:</p> 
not 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
[-u] 
class="s">"</span><span 
class="s">"</span><span 
class="k">return</span><span 
not 
not 
not 
(argv[1][0] 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
class="s">"</span><span 
[-u] 
class="s">"</span><span 
class="s">"</span><span 
class="k">return</span><span 
</head> 
</nav> 
‘stdio’) 
program) 
has 
has 
disk 
disk 
end 
condition. 
class="n">sum</span><span 
It 
code</h2> 
It 
end 
end 
end 
overwritten 
has 
Note 
It 
<p>Any 
class="highlighter-rouge">argc--; 
speaking) 
speaking) 
outstanding 
class="page-content"> 
class="post"> 
any 
any 
any 
already 
notice 
DON'T 
<strong><em>Do 
writing 
Recall 
importantly, 
any 
any 
class="highlighter-rouge">char 
any 
any 
array.</p> 
u 
class="highlighter-rouge">switch</code> 
arrays; 
u 
Engs 
learn 
learn 
<p>These 
input 
input 
directive 
learn 
class="p">);</span> 
class="p">);</span> 
speaking, 
pass 
class="highlighter-rouge">NULL</code> 
class="n">argc</span><span 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
type 
class="p">);</span> 
class="p">);</span> 
input 
pass 
class="p">);</span> 
class="p">);</span> 
class="highlighter-rouge">NULL</code> 
input 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="highlighter-rouge">fopen(),</code> 
extract 
input 
learn 
File: 
input 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
comment 
class="p">);</span> 
comment 
stdin); 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
comment 
input 
type 
type 
calling 
type 
class="p">);</span> 
class="p">);</span> 
calling 
class="n">argc</span><span 
input 
class="n">argc</span><span 
class="n">argc</span><span 
input 
class="n">argc</span><span 
class="p">);</span> 
class="n">argc</span><span 
input 
type 
pass 
class="n">argc</span><span 
class="n">argc</span><span 
class="p">);</span> 
class="n">argc</span><span 
class="sb">`</span> 
class="sb">`</span> 
class="sb">`</span> 
class="sb">`</span> 
class="sb">`</span> 
class="sb">`</span> 
</span>argv[5] 
class="sb">`</span> 
character. 
class="n">argc</span><span 
input 
class="p">);</span> 
class="n">argc</span><span 
unique=%d, 
class="p">);</span> 
class="p">);</span> 
)</h2> 
input 
class="n">argc</span><span 
input 
class="k">while</span> 
class="n">argc</span><span 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
class="p">);</span> 
unique=%d, 
class="p">);</span> 
class="p">);</span> 
initial-scale=1"> 
I/O 
I/O 
I/O 
I/O 
I/O 
class="p">;</span> 
but 
I/O 
pointers: 
class="cm">/* 
class="cm">/* 
I/O 
class="p">;</span> 
class="cm">/* 
I/O 
arg...)</code>.</p> 
class="p">;</span> 
class="p">;</span> 
I/O 
I/O 
efficient 
screen 
class="cm">/* 
class="p">;</span> 
class="p">;</span> 
I/O 
I/O 
class="p">;</span> 
I/O 
convenience, 
class="p">;</span> 
class="p">;</span> 
class="cm">/* 
class="p">;</span> 
class="p">;</span> 
gets( 
class="cm">/* 
class="cm">/* 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="cm">/* 
class="cm">/* 
class="cm">/* 
class="p">;</span> 
but 
above 
screen 
above 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
above 
but 
./nosort 
but 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
above 
but 
class="cm">/* 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
Balkcom. 
& 
<p><strong><em>Warning: 
this 
this 
both 
this 
this 
this 
this 
then 
was 
class="n">fprintf</span><span 
class="n">fprintf</span><span 
interpreted. 
series 
<p>Security 
functions, 
functions, 
then 
this 
this 
this 
then 
this 
this 
this 
books 
this 
then 
this 
books 
safe 
then 
then 
this 
execute 
literals. 
then 
interpreted. 
was 
width=48 
use 
required 
class="sc">'r'</span><span 
use 
use 
use 
use 
required 
there"</span><span 
World! 
World! 
use 
use 
immediate 
code).</p> 
use 
use 
use 
search 
class="sc">'r'</span><span 
use 
use 
class="sc">'r'</span><span 
systems. 
simply 
simply 
class="s">"/etc/passwd"</span><span 
class="s">"/etc/passwd"</span><span 
see 
attention 
class="p">(;;)</span> 
addition, 
see 
as: 
see 
class="nt">-y</span> 
class="nt">-y</span> 
am 
</html> 
<article 
href="index.html">lecture</a>”.</p> 
‘file 
equality). 
class="cp"> 
recompile 
without 
(<code 
(<code 
without 
expansion 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
class="p">]);</span> 
‘pointer 
"man 
class="cp"> 
extra” 
on 
on 
on 
arguments:</p> 
This 
specifiers, 
(in 
This 
class="mi">1</span><span 
This 
basic 
This 
on 
After 
After 
After 
basic 
on 
This 
on 
on 
on 
on 
on 
class="err">$</span> 
on 
on 
class="err">$</span> 
programming: 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
on 
on 
// 
// 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
class="mi">1</span><span 
This 
Kotz, 
on 
perform 
pointer</em>:</p> 
we 
we 
perform 
also 
<p>Many 
we 
also 
perform 
also 
we 
modified 
we 
we 
mistake 
we 
we 
we 
we 
we 
we 
we 
we 
we 
terminated 
we 
we 
class="highlighter-rouge">fgets()</code> 
class="n">stream</span><span 
class="n">stdin</span><span 
class="highlighter-rouge">fgets()</code> 
terminated 
class="highlighter-rouge">fgets()</code> 
we 
also 
we 
e 
also 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
class="c1">// 
we 
class="c1">// 
we 
class="c1">// 
class="c1">// 
class="n">ch</span> 
class="c1">// 
class="c1">// 
I 
Engs50 
routines), 
highlighter-rouge"><div 
go 
highlighter-rouge"><div 
these 
using 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
just 
treated 
highlighter-rouge"><div 
highlighter-rouge"><div 
ones 
accumulated 
highlighter-rouge"><div 
closed 
highlighter-rouge"><div 
class="p">];</span> 
using 
want 
using 
highlighter-rouge"><div 
highlighter-rouge"><div 
class="p">];</span> 
using 
highlighter-rouge"><div 
class="p">];</span> 
just 
applies 
highlighter-rouge"><div 
idea 
using 
serious 
length 
length 
length 
length 
highlighter-rouge"><div 
length 
length 
length 
highlighter-rouge"><div 
length 
length 
length 
length 
idea 
using 
serious 
length 
Say 
highlighter-rouge"><div 
file</em>, 
highlighter-rouge"><div 
bytes 
bytes 
want 
just 
(such 
length 
ones 
highlighter-rouge"><div 
these 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
go 
</span>argv[3] 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
Lab3 
class="p">];</span> 
class="o">:</span> 
C, 
class="highlighter-rouge">argv[1][0]</code>. 
href="/engs50/Examples/nosort-getopt.c">nosort-getopt.c</a></em></strong></p> 
function, 
highlighter-rouge"><div 
class="p">];</span> 
using 
these 
maintainable, 
/> 
standard 
is 
a 
a 
standard 
standard 
standard 
a 
a 
a 
is 
standard 
a 
standard 
a 
a 
standard 
is 
is 
a 
is 
is 
a 
Thus, 
a 
is 
a 
standard 
a 
is 
a 
is 
standard 
a 
is 
a 
is 
a 
a 
standard 
is 
a 
is 
a 
a 
is 
standard 
standard 
is 
a 
standard 
a 
class="o">+=</span> 
is 
a 
frmo 
a 
a 
href="/engs50/Examples/files-input.txt">input</a>.</p> 
is 
a 
is 
is 
a 
is 
a 
a 
is 
a 
is 
is 
a 
is 
a 
class="s">"Hello"</span><span 
is 
is 
is 
is 
is 
is 
a 
is 
a 
Hello 
is 
Hello 
is 
is 
Hello 
is 
is 
a 
Hello 
is 
Hello 
is 
is 
Hello 
is 
a 
is 
is 
a 
is 
is 
a 
is 
a 
a 
is 
is 
a 
is 
a 
is 
is 
is 
a 
a 
is 
a 
buffer-safe 
a 
is 
is 
is 
a 
a 
a 
is 
a 
href="/engs50/Examples/getchar.c">getchar.c</a></strong></p> 
a 
a 
is 
is 
is 
is 
Thus, 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
a 
is 
a 
is 
is 
is 
is 
is 
hexadecimal 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
is 
a 
is 
a 
a 
is 
a 
is 
a 
is 
is 
is 
is 
is 
<li>the 
<li>the 
a 
is 
a 
is 
is 
a 
<li>the 
a 
is 
a 
is 
is 
is 
is 
is 
is 
is 
http-equiv="X-UA-Compatible" 
instructs 
class="nf">main</span><span 
knows 
class="highlighter-rouge">fscanf()</code> 
computer 
IT. 
#include 
class="nf">main</span><span 
string2 
string2 
class="s">The 
class="s">The 
string2 
string2 
string2 
string2 
string2 
X, 
significance 
class="nf">main</span><span 
class="nf">main</span><span 
class="s">The 
</span>argv[6] 
Usage: 
second 
#include 
#include 
class="nf">main</span><span 
<p> 
<div 
<div 
<div 
meant 
<div 
<div 
don’t 
<div 
<div 
<div 
sure 
<div 
<div 
output/display 
<div 
outputting 
<div 
<div 
<div 
<div 
don’t 
<div 
gets(). 
class="s">"After 
class="s">"After 
<div 
<div 
unrelated 
<div 
<div 
<ol> 
<div 
help 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
<ol> 
component 
help 
<div 
<div 
Zhou, 
large, 
class="post-content"> 
files.</p> 
pointer 
pointer 
be 
be 
class="highlighter-rouge">stdout</code>, 
shell 
functions.</p> 
be 
We 
be 
be 
be 
be 
We 
be 
... 
be 
be 
be 
... 
pointer 
pointer 
We 
buffer.</p> 
class="highlighter-rouge">argc</code>),</li> 
We 
pointer 
be 
pointer 
pointer 
</ul> 
pointer 
</ul> 
href="/engs50/Examples/">Examples</a>] 
class="wrapper"> 
manipulate 
class="nb">NULL</span><span 
could 
class="nb">NULL</span><span 
data 
sample 
class="k">break</span><span 
<p>See 
sample 
around 
could 
manipulation 
manipulate 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="s">" 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="s">" 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
manipulate 
could 
<h3 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="n">to</span> 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
reverse=%d</span><span 
{ 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
class="n">printf</span><span 
class="k">break</span><span 
class="n">printf</span><span 
reverse=%d</span><span 
class="wrapper"> 
class="s">"r"</span><span 
stream</em> 
string), 
must 
promote 
start 
enters 
[-n] 
[-n] 
class="site-title" 
href="/engs50/Resources/">Resources</a>] 
terminals 
ok, 
variable 
variable 
becomes 
What 
code 
code 
code 
class="k">sizeof</span><span 
class="k">sizeof</span><span 
code 
code 
code 
class="k">sizeof</span><span 
code 
code 
code 
code 
code 
write 
code 
code 
code 
code 
write 
write 
class="k">sizeof</span><span 
pointed 
code 
code 
Only 
variable 
line</span><span 
code 
pointed 
pointed 
pointed 
pointed 
pointed 
pointed 
pointed 
pointed 
code 
with 
examples 
cited 
output 
so 
find 
with 
when 
so 
output 
many 
output 
output 
output 
output 
when 
output 
output 
when 
output 
with 
accomplished 
so 
lots 
seriously 
output 
when 
with 
with 
with 
when 
class="k">for 
class="k">for 
class="k">for 
class="k">for 
seriously 
so 
lesson 
conditions 
with 
with 
with 
with 
many 
examples 
so 
“an 
so 
output 
with 
with 
idioms:</p> 
so 
find 
when 
<strong>2018-10-10</strong> 
</a> 
transactions 
texts 
refer 
statement! 
have 
have 
have 
have 
book 
run 
defines 
run 
run 
learn. 
have 
run 
run 
Remember 
have 
Most 
run 
</span>./command 
class="n">r</span> 
class="n">r</span> 
run 
class="n">numsort</span><span 
class="n">numsort</span><span 
run 
looking 
class="p">(</span> 
class="n">numsort</span><span 
run 
class="n">numsort</span><span 
run 
looking 
class="p">(</span> 
class="n">numsort</span><span 
Libraries</h1> 
or 
or 
routines 
</span></code></pre></div></div> 
</blockquote> 
or 
or 
or 
class="highlighter-rouge">1</code> 
</blockquote> 
such 
</blockquote> 
most 
most 
most 
or 
or 
or 
exposure 
</blockquote> 
<em>by 
or 
or 
</blockquote> 
ANSI 
class="n">printf</span> 
or 
or 
or 
such 
stream; 
stream 
or 
or 
let 
class="k">const</span> 
class="k">const</span> 
or 
</span>line 
cs50 
</span>line 
such 
such 
html> 
daunting 
class="n">class</span> 
each 
class="n">class</span> 
class="highlighter-rouge">string2</code>.</p> 
<p>It 
shall 
<p>A 
each 
each 
<p>A 
each 
class="n">fp</span><span 
class="n">fp</span><span 
three 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
need 
class="n">fp</span><span 
need 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
class="n">fp</span><span 
%x</span><span 
%x</span><span 
class="highlighter-rouge">sizeof(buf)-1</code> 
subsitutions 
class="s2">"F 
need 
content="IE=edge"> 
understandable 
provided 
operations 
strings. 
gone 
similar 
pay 
characters 
class="p">));</span> 
flaw 
"First 
class="p">));</span> 
class="p">));</span> 
class="p">));</span> 
class="p">));</span> 
class="p">));</span> 
characters 
characters 
characters 
characters 
characters 
characters 
characters 
flaw 
characters 
characters 
replace 
characters 
</ol> 
provided 
class="s1">'t'</span> 
characters 
characters 
</ol> 
<link 
<link 
<link 
usual 
<p>All 
including:</p> 
class="s">"w"</span><span 
class="s">"w"</span><span 
Science"</span><span 
following 
Science"</span><span 
written, 
reads 
following 
including 
class="highlighter-rouge">\0</code>.</p> 
<em>argv 
following 
following 
class="s">"argument 
following 
class="s">"argument 
argv[%d] 
following 
class="s2">"hello"</span><span 
lines 
lines 
&gt; 
Professors 
program 
program 
provides 
program 
stdio 
class="p">))</span> 
That’s 
assigned 
outer 
acceptance 
class="n">format</span><span 
class="highlighter-rouge">printf(format, 
width 
provides 
Because 
class="n">format</span><span 
<p>When 
class="p">))</span> 
twice. 
stdio 
class="highlighter-rouge">really-bad-code.c</code>.</p> 
program 
program 
program 
fault 
program 
fault 
program 
program 
program 
compiler. 
program 
program 
program 
program 
program 
class="p">))</span> 
class="highlighter-rouge">--switch</code> 
program 
handy-dandy 
class="p">))</span> 
Palmer, 
indebted 
Java. 
file-based 
bffff87a 
keyboard 
is:</p> 
encountered. 
keyboard 
class="n">parses</span> 
(strictly 
(strictly 
class="site-nav"> 
href="/engs50/Notes/">Notes</a>] 
library</em> 
*/</span> 
*/</span> 
*/</span> 
functions. 
sure. 
*/</span> 
below 
*/</span> 
below 
*/</span> 
*/</span> 
spectacular 
happen; 
argument 
i 
argument 
argument 
argument 
argument 
argument 
argument 
i 
argument 
argument 
argument 
argument 
argument 
argument 
argument 
argument 
argument 
argument 
argument 
below 
argument 
Extra 
Extra 
that 
class="n">ferror</span><span 
that 
that 
that 
that 
condition, 
that 
class="n">department</span><span 
that 
that 
class="n">department</span><span 
that 
that 
that 
one: 
mistake, 
that 
that 
transferred 
that 
that 
that 
that 
that 
that 
that 
that 
that 
that 
r 
argv++</code> 
that 
that 
that 
formats. 
r 
class="s">"file.dat"</span><span 
object. 
possible 
flushed 
class="p">,</span><span 
class="p">,</span><span 
class="n">strcpy</span><span 
older 
important 
<p>Bugs 
important 
mistakes 
like 
like 
like 
interesting 
class="p">,</span><span 
class="s1">'g'</span> 
class="n">nosort</span> 
class="n">nosort</span> 
class="n">nosort</span> 
class="n">nosort</span> 
class="n">nosort</span> 
like 
argv 
like 
like 
educators. 
an 
an 
an 
an 
an 
floating-point 
an 
<p>As 
<p>As 
an 
than 
than 
than 
than 
an 
an 
than 
than 
an 
class="highlighter-rouge">getchar()</code>. 
it.</p> 
than 
an 
href="/engs50/Examples/command.c">command.c</a></em></strong></p> 
demonstrates 
an 
id="getopt-">getopt( 
class="s">"run"</span><span 
align=center 
programming 
through 
read, 
class="n">argv</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="n">fscanf</span><span 
class="n">fscanf</span><span 
read, 
class="k">for</span> 
class="n">fscanf</span><span 
class="se">\n</span><span 
value</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
read, 
byte.</p> 
systems 
class="n">argv</span><span 
class="n">argv</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="k">for</span> 
class="se">\n</span><span 
class="n">argv</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="k">for</span> 
class="se">\n</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="n">argv</span><span 
class="n">argv</span><span 
class="s1">'.'</span> 
class="n">argv</span><span 
class="n">argv</span><span 
through 
class="n">argv</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="n">argv</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
class="n">argv</span><span 
class="se">\n</span><span 
through 
adding 
relevant 
class="n">argv</span><span 
class="n">argv</span><span 
through 
class="n">argv</span><span 
while((argc 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
class="se">\n</span><span 
- 
- 
class="n">fopen</span><span 
class="n">fopen</span><span 
class="n">fopen</span><span 
specifier</em>, 
some 
...*/</span> 
class="n">BUFSIZ</span><span 
class="n">BUFSIZ</span><span 
some 
some 
...*/</span> 
class="n">fopen</span><span 
</span>./buffer-overflow 
</span>./buffer-overflow 
gets()!</em></strong></p> 
we’ve 
<p><strong><em>Example: 
<p><strong><em>Example: 
command. 
class="n">progname</span> 
class="sc">'u'</span><span 
class="s">"Usage: 
<p><strong><em>Example: 
class="n">progname</span> 
class="sc">'u'</span><span 
class="s">"Usage: 
format, 
class="n">buffer</span><span 
class="n">buffer</span><span 
variables 
variables 
class="n">buffer</span><span 
class="n">buffer</span><span 
class="n">buffer</span><span 
class="n">buffer</span><span 
array, 
class="n">gets</span><span 
now 
</span>argv[0] 
class="s2">"to"</span><span 
parsing) 
array, 
array, 
support 
Dartmouth 
compiler 
construct 
%s 
internal 
<em>know</em> 
%s 
MAXELS 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
class="n">string2</span><span 
is! 
operating 
id="the-coperating-system-interface">The 
previous 
compiler 
%s 
%s 
<head> 
requiring 
about 
care 
about 
class="highlighter-rouge">stderr</code>, 
end-of-file 
decimal 
about 
first 
get 
class="highlighter-rouge">gets()</code>; 
length. 
i.e., 
Instead, 
end-of-file 
C/Operating 
about 
get 
*argv[]</code>? 
about 
next 
class="o">[</span>cs50@flume] 
class="o">[</span>cs50@flume] 
first 
first 
first 
class="o">[</span>cs50@flume] 
first 
first 
first 
first 
first 
first 
first 
class="o">[</span>cs50@flume] 
included, 
next 
about 
first 
refers.</li> 
<p><small>This 
<em>file 
<p>Although 
<em>file 
There 
There 
Revised 
Thanks 
Thanks 
<p>Operating 
operator. 
class="se">\'</span><span 
class="n">the</span> 
class="se">\'</span><span 
subscript 
subscript 
subscript 
class="se">\'</span><span 
updated 
arg...)</code> 
class="highlighter-rouge">fprintf(stdout, 
facility 
character 
character 
character 
allow 
pointers, 
character 
character 
pointers, 
class="k">while</span><span 
character 
character 
character 
character 
character 
character 
character 
class="s">%s</span><span 
character 
character 
character 
character 
character 
character 
character 
character 
character 
defensive 
class="cp">#include&lt;stdio.h&gt; 
class="k">while</span><span 
class="cp">#include&lt;stdio.h&gt; 
&amp;&amp; 
(nor 
<code 
<code 
(and 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="p">)</span><span 
class="p">)</span><span 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="highlighter-rouge">c</code> 
values, 
<code 
values, 
<code 
values, 
<code 
<code 
(and 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="highlighter-rouge">fgets()</code>, 
<code 
<code 
<code 
<code 
class="highlighter-rouge">fclose()</code>. 
<code 
<code 
<code 
<code 
<code 
<code 
string2, 
<code 
<code 
<code 
<code 
<code 
class="highlighter-rouge">fgets()</code>, 
</span>string1 
<code 
<code 
<code 
<code 
<code 
<code 
up 
<code 
<code 
<code 
<code 
<code 
<code 
visible 
<code 
<code 
class="n">s</span><span 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
integer 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="highlighter-rouge">printf</code>, 
expects 
<code 
<code 
variation 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="highlighter-rouge">argv</code>; 
<code 
<code 
<code 
<code 
<img 
more 
described 
predefines 
condition 
often 
often 
more 
often 
more 
class="n">line</span><span 
class="n">line</span><span 
class="n">line</span><span 
<p><strong>Example: 
<p><strong>Example: 
class="n">strlen</span><span 
class="n">strlen</span><span 
class="n">strlen</span><span 
is:</span><span 
class="n">strlen</span><span 
more 
more 
often 
more 
did 
more 
more 
condition 
<p><strong>Example: 
Windows 
<p><strong>Example: 
were 
were 
pointers; 
more 
x7fff5d056376 
x7fff5d05638b 
x7fff5d056394 
often 
informed 
class="s">"Switch 
class="s">"Switch 
class="s">"Switch 
did 
getopt" 
class="s">"Switch 
class="s">"Switch 
class="s">"Switch 
<footer 
process 
class="n">feof</span><span 
process 
as</p> 
wrapped 
process 
days.</p> 
improved 
class="n">feof</span><span 
process 
class="n">feof</span><span 
text 
text 
text 
chars. 
requires 
requires 
requires 
… 
class="p">])</span> 
process 
itself 
error 
error 
itself 
itself 
error 
class="n">MAXELS</span><span 
class="n">MAXELS</span><span 
class="o">&lt;</span> 
class="s">"The 
class="s">"The 
class="s">"The 
gets() 
class="s">"The 
one 
class="highlighter-rouge">NULL</code>). 
one 
command-line 
class="o">&lt;</span> 
one 
class="o">&lt;</span> 
class="s">"The 
class="s">"The 
command-line 
command-line 
class="k">switch</span> 
one 
one 
command-line 
class="k">switch</span> 
version 
href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen 
name="viewport" 
point 
side 
Put 
%02d</span><span 
contrast 
class="highlighter-rouge">String</code> 
class="highlighter-rouge">d</code> 
class="highlighter-rouge">s</code> 
%02d</span><span 
bffff848 
boundary 
boundary 
point 
operators 
href="/engs50/Examples/arguments.c">arguments.c</a></strong></p> 
class="n">numsort</span> 
left 
discuss 
class="n">numsort</span> 
content="width=device-width, 
alt="icon"> 
library 
class="n">fp</span> 
library 
can 
checks 
checks 
class="n">fp</span> 
library 
library 
library 
full). 
library 
special 
special 
#define 
look 
nice 
library 
pg. 
library 
"</span><span 
look 
types 
can 
can 
can 
can 
look 
types 
special 
look 
class="highlighter-rouge">[ 
can 
look 
library 
<a 
efficient, 
library.</p> 
<p>We’ll 
themselves 
<a 
<a 
<a 
<a 
convention, 
<a 
<a 
./arguments 
<a 
class="s1">'h'</span> 
<a 
supported, 
<a 
sort 
sort 
sort 
<a 
sort 
sort 
sort 
<a 
</font> 
strictly 
it’s 
hence 
addresses 
class="highlighter-rouge">strlen()</code>, 
<p>If 
<p>If 
it’s 
<p>If 
<p>If 
<p>If 
class="n">switches</span> 
</article> 
functions 
functions 
source 
functions 
functions 
<blockquote> 
“streams”.</p> 
functions 
functions 
return 
<blockquote> 
<blockquote> 
functions 
functions 
functions 
describing 
specify 
our 
<blockquote> 
%d"</span><span 
%d"</span><span 
return 
functions 
return 
Always 
return 
<blockquote> 
taken 
class="n">n</span> 
class="n">n</span> 
class="se">\n\n</span><span 
class="n">n</span> 
class="se">\n\n</span><span 
class="se">\n\n</span><span 
class="se">\n\n</span><span 
class="se">\n\n</span><span 
class="se">\n\n</span><span 
above) 
functions 
our 
MacOS 
functions 
</span>./arguments 
functions 
class="se">\n\n</span><span 
class="n">n</span> 
class="n">n</span> 
class="o">&amp;&amp;</span> 
argv[1][1] 
size=-1> 
</body> 
C 
C 
C 
C 
C 
C 
much 
C 
C 
C 
C 
expect, 
C 
C 
C 
lesson: 
C 
array. 
C 
C 
C 
C 
linker 
C 
C 
class="highlighter-rouge">argv[0]</code> 
%d</span><span 
x7fff5d056391 
C 
only 
C 
array. 
array. 
C 
C 
class="n">getopt</span><span 
automatically 
<p>C’s 
class="n">strcmp</span><span 
segment 
determine 
array! 
class="highlighter-rouge">string1</code>, 
<p>We 
interface</h3> 
]</code>. 
<p>We 
class="se">\'\n</span><span 
x7fff5d056397 
class="n">u</span> 
class="n">u</span> 
class="n">program</span> 
class="se">\'\n</span><span 
item 
class="highlighter-rouge">-s</code> 
this??? 
class="se">\'\n</span><span 
to 
to 
to 
collection 
to 
to 
to 
to 
to 
to 
to 
detected. 
to 
to 
class="n">T</span><span 
class="n">arg1</span><span 
class="n">T</span><span 
to 
to 
to 
class="highlighter-rouge">f</code> 
“buffering”. 
to 
to 
to 
to 
to 
to 
to 
to 
to 
above?</p> 
to 
to 
to 
class="n">arg1</span><span 
to 
class="highlighter-rouge">man</code> 
to 
readability, 
to 
to 
to 
to 
to 
However, 
to 
max 
to 
max 
max 
to 
to 
However, 
to 
to 
to 
class="highlighter-rouge">string2</code> 
to 
class="highlighter-rouge">string2</code>. 
(e.g., 
to 
to 
to 
to 
to 
to 
class="highlighter-rouge">argv</code>)</li> 
to 
to 
to 
to 
done 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
dash 
to 
class="o">[</span>cs50@tahoe] 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
Standard 
Standard 
of 
later.</p> 
of 
of 
of 
of 
of 
of 
of 
class="highlighter-rouge">fprintf</code> 
of 
of 
of 
held 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
class="s">"Hello 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
<p>Example:</p> 
two 
of 
of 
of 
of 
of 
of 
of 
of 
indirection 
of 
two 
two 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
class="n">The</span> 
of 
of 
of 
form 
of 
necessary 
of 
of 
of 
of 
<p>Another 
of 
The 
software 
The 
may 
may 
The 
mechanism 
may 
may 
may 
may 
may 
may 
The 
may 
class="p">),</span> 
class="p">),</span> 
id="why-not-to-use-gets--an-example-of-dangerous-code">Why 
The 
The 
calls 
The 
program. 
The 
characters</span><span 
characters</span><span 
characters</span><span 
class="s">"Please 
characters</span><span 
The 
The 
The 
The 
The 
The 
The 
The 
The 
The 
program. 
The 
The 
segfault 
class="p">),</span> 
The 
always 
program. 
It’s 
names 
The 
The 
The 
The 
The 
The 
The 
The 
The 
class="s1">'r'</span> 
The 
The 
The 
The 
The 
The 
The 
<p>An 
The 
<header 
<header 
its 
place 
its 
class="o">==</span> 
class="o">==</span> 
here 
shorthand 
specifiers 
arrays 
class="o">==</span> 
variables.</p> 
users 
arrays 
Book 
class="o">==</span> 
fgets() 
arrays 
its 
its 
its 
class="o">==</span> 
its 
href="/engs50/"> 
class="post-title">Lecture 
“<a 
<p>The 
buffered 
confused 
confused 
<p>The 
<p>The 
appears 
When 
<p>The 
<p>The 
indicate 
<p>The 
appears 
reference</em>, 
operator:</p> 
indicate 
<p>The 
<p>The 
<p>The 
<p>Notice 
class="n">main</span><span 
class="n">main</span><span 
<p>The 
<p>The 
<p>The 
<p>The 
class="n">main</span><span 
<p>The 
&lt;getopt.h&gt; 
== 
(CS50) 
C++ 
(as 
class="k">if</span><span 
(here, 
class="k">if</span><span 
us 
might 
class="k">if</span><span 
href="/engs50/Examples/files.c">files.c</a></strong></p> 
class="highlighter-rouge">string1</code> 
class="highlighter-rouge">string1</code> 
‘overflow’ 
happen 
happen 
might 
(as 
example: 
happen 
us 
command 
command 
command 
command 
command 
command 
command 
command 
class="p">:</span> 
class="p">:</span> 
class="sc">'n'</span><span 
class="p">:</span> 
command 
class="p">:</span> 
class="p">:</span> 
class="sc">'n'</span><span 
class="p">:</span> 
(CS50) 
</footer> 
task, 
require 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
because 
</code></pre></div></div> 
</code></pre></div></div> 
class="mi">50</span><span 
</code></pre></div></div> 
further 
</code></pre></div></div> 
class="mi">50</span><span 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
class="s">"%d"</span><span 
</code></pre></div></div> 
uses 
uses 
uses 
sizeof(string2), 
</code></pre></div></div> 
uses 
gets<span 
</code></pre></div></div> 
</code></pre></div></div> 
keep 
</code></pre></div></div> 
</code></pre></div></div> 
class="highlighter-rouge">main()</code> 
class="highlighter-rouge">main()</code> 
class="highlighter-rouge">main()</code> 
class="highlighter-rouge">main()</code> 
</code></pre></div></div> 
</code></pre></div></div> 
lower 
</code></pre></div></div> 
</code></pre></div></div> 
<em>i</em>, 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
class="n">run</span> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
class="site-footer"> 
build 
rel="canonical" 
as 
as 
other 
they 
as 
as 
accept 
as 
Format 
as 
other 
other 
enter 
enter 
enter 
accept 
they 
parameter 
overflow 
as 
as 
size 
size 
class="highlighter-rouge">buf</code>, 
class="highlighter-rouge">buf</code>, 
enter 
as 
all. 
parameter 
as 
as 
down 
as 
class="highlighter-rouge">char*</code>. 
as 
as 
commands 
other 
as 
changes 
as 
as 
commands 
other 
</div> 
</div> 
</div> 
</div> 
design 
notes 
language 
windowing 
<em>standard 
pointer, 
check 
pointer, 
been 
pointer, 
class="n">sprintf</span><span 
check 
files 
mistakes, 
them. 
millions 
been 
little 
href="/engs50/Examples/buffer-overflow.c">buffer-overflow.c</a></strong></p> 
it's 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="n">string1</span><span 
class="highlighter-rouge">\0</code> 
<li>an 
<li>an 
check 
been 
avoid 
how 
follow 
class="p">((</span><span 
how 
how 
object 
how 
talk 
program! 
program! 
how 
how 
class="highlighter-rouge">argv[N]</code> 
<em>array 
class="s2">"skating?"</span><span 
class="p">((</span><span 
actual 
</li> 
</li> 
how 
class="p">((</span><span 
class="p">}</span> 
class="k">else</span> 
class="p">}</span> 
class="p">}</span> 
preceding, 
snippets:</p> 
class="n">fgets</span><span 
class="p">}</span> 
class="n">fgets</span><span 
class="p">}</span> 
programmers 
class="highlighter-rouge">buffer-overflow.c</code>, 
call. 
class="k">else</span> 
class="k">else</span> 
class="p">}</span> 
call. 
class="n">fgets</span><span 
class="n">fgets</span><span 
‘newline’ 
do 
mouthful 
Then 
class="p">}</span> 
class="p">}</span> 
class="p">}</span> 
class="k">default</span><span 
class="p">}</span> 
class="p">}</span> 
class="p">}</span> 
things 
class="highlighter-rouge">[1]</code> 
class="highlighter-rouge">man 
class="p">}</span> 
class="p">}</span> 
class="p">}</span> 
</header> 
</header> 
operator.</p> 
class="n">department</span> 
although 
class="n">department</span> 
same 
<p>Apart 
newline, 
results!</p> 
class="n">size</span><span 
set 
class="s">%c</span><span 
class="s">%c</span><span 
class="s">%c</span><span 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
included 
class="s">"Computer 
well 
class="s">"Computer 
class="p">{</span> 
class="p">{</span> 
class="highlighter-rouge">sscanf()</code> 
class="p">{</span> 
safe. 
work 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
printed 
(no 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
class="p">{</span> 
rel="shortcut 
class="kt">int</span> 
class="kt">int</span> 
class="highlighter-rouge">==</code> 
class="kt">int</span> 
“flush” 
class="kt">int</span> 
class="highlighter-rouge">sscanf()</code>. 
class="kt">int</span> 
class="kt">int</span> 
world. 
class="kt">int</span> 
class="kt">int</span> 
warning: 
safe:</p> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
wherever 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="s">`</span><span 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="n">unique</span><span 
increment 
class="n">unique</span><span 
class="kt">int</span> 
class="kt">int</span> 
class="kt">int</span> 
class="n">unique</span><span 
class="n">unique</span><span 
character-based 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
statement 
inside 
statement 
expression 
expression 
expression 
statement 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
(Program 
running 
class="highlighter-rouge">fgets()</code>. 
class="highlight"><pre 
class="o">()</span>, 
class="highlight"><pre 
buffer. 
) 
) 
) 
) 
class="highlight"><pre 
class="highlight"><pre 
return, 
) 
class="highlight"><pre 
constant 
class="highlight"><pre 
subscripting 
subscripting 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
x7fff5d056380 
class="highlight"><pre 
class="highlight"><pre 
option 
usage 
class="highlight"><pre 
option 
class="highlight"><pre 
option 
option 
statement 
class="highlighter-rouge">break</code> 
subscripting 
subscripting 
class="highlight"><pre 
) 
option 
class="footer-heading">Engs50 
<strong>18:07</strong>.</small></p> 
https://thayer.github.io/engs50/Notes/c2/extra.html 3 59967 
(or 
class="p">...</span> 
is, 
class="p">[])</span> 
class="p">...</span> 
class="p">...</span> 
class="p">...</span> 
function 
generalization 
class="p">...</span> 
class="p">...</span> 
class="p">...</span> 
example 
function 
function 
function 
function 
string1 
string1 
string1 
string1 
string1 
If 
string1 
string1 
string1 
string1 
string1 
string1 
string1 
function 
function 
function 
function 
overflows 
If 
If 
use. 
function 
function 
function 
class="p">[])</span> 
class="p">[])</span> 
class="p">[])</span> 
is, 
class="p">[])</span> 
hello 
example 
If 
class="p">[])</span> 
processing 
statements.</li> 
class="p">[])</span> 
processing 
more), 
class="highlighter-rouge">printf</code>. 
modifiers</em>, 
pointers 
pointers 
pointers 
class="n">MAXLINE</span><span 
into 
into 
caused 
</span><span 
equal 
uncomment 
uncomment 
uncomment 
pointers 
into 
into 
into 
pointers 
pointers 
char” 
pointers 
<p>Look 
pointers 
</span><span 
</span><span 
n 
</span><span 
</span><span 
incremented, 
base 
arithmetic’, 
base 
pointers 
n 
</span><span 
</span><span 
</span><span 
will 
will 
library</h2> 
will 
will 
will 
consistency. 
class="o">++</span> 
class="k">in 
will 
will 
characters; 
will 
will 
will 
.1415 
.1415 
class="se">\"</span><span 
class="se">\"</span><span 
will 
class="k">in 
class="k">in 
class="k">in 
class="k">in 
class="k">in 
class="k">in 
class="k">in 
will 
will 
More 
designed 
designed 
Taylor</a> 
does 
at 
C’s 
arguments 
C’s 
passing 
<p>There 
at 
contains 
at 
contains 
contains 
does 
at 
at 
at 
does 
does 
prototyped. 
arguments 
at 
class="nb">command 
arguments 
at 
class="nb">command 
at 
commencing 
supports 
class="n">argc</span> 
arguments 
does 
array-of-pointers 
arguments 
supports 
at 
charset="utf-8"> 
content="In 
reliable, 
Unix 
For 
written 
data. 
<em>format 
<em>format 
written 
written 
less 
less 
</span>string2, 
less 
</span>string2, 
written 
if 
if 
Linux, 
declare 
precedence.</p> 
For 
class="n">reverse</span><span 
class="n">reverse</span><span 
class="n">reverse</span><span 
getopt</code>.</p> 
class="n">reverse</span><span 
class="n">reverse</span><span 
you 
you 
href="/engs50/css/main.css"> 
href="/engs50/Reading/">Reading</a>] 
<h2 
class="o">*</span><span 
you 
you 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
you 
class="o">*</span><span 
potential 
<h2 
you 
*/</span><span 
class="s">"%s 
class="s">"%s 
class="s">"%s 
buffer, 
segfault; 
class="o">*</span><span 
class="o">*</span><span 
class="o">*</span><span 
you 
you 
you 
you 
you 
parameters:</p> 
you 
class="o">*</span><span 
parameters:</p> 
class="o">*</span><span 
you 
class="o">*</span><span 
v 
v 
class="o">*</span><span 
class="o">*</span><span 
you 
you 
you 
class="o">*</span><span 
class="o">*</span><span 
<h2 
*/</span><span 
class="o">*</span><span 
class="o">*</span><span 
<h2 
rel="stylesheet" 
programs 
write, 
class="s">"Course: 
class="s">"Course: 
class="n">numlines</span><span 
class="n">numlines</span><span 
made 
finds 
anything 
programs 
programs 
assumed 
class="s">"Error: 
class="highlighter-rouge">char*</code> 
class="s">"Error: 
term 
your 
<p>In 
formatted 
format 
format 
formatted 
them 
your 
make 
make 
Description: 
class="n">strcat</span><span 
newline 
them 
filenames.</p> 
'-')) 
and 
development 
CS50 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
class="o">&amp;</span><span 
and 
and 
class="o">&amp;</span><span 
and 
and 
and 
and 
and 
and 
and 
is: 
is: 
and 
and 
is: 
is: 
is: 
and 
and 
and 
(which 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
remaining 
class="n">progname</span><span 
class="n">progname</span><span 
decrement 
and 
and 
and 
effect, 
and 
and 
class="n">progname</span><span 
class="n">progname</span><span 
and 
