tools. 
<body> 
class="post-header"> 
are 
are 
are 
are 
are 
are 
are 
are 
are 
there 
there 
are 
went 
went 
]</code>,</p> 
are 
are 
substituted 
are 
all 
are 
there 
there 
permission 
all 
are 
all 
all 
are 
are 
are 
Command</h2> 
Wrong! 
Wrong! 
Wrong! 
are 
all 
all 
there 
all 
"$*"'</span> 
are 
there 
are 
all 
all 
</span>diff 
are 
are 
all 
class="nv">$c</span> 
concurrently 
rm 
are 
are 
all 
all 
previously 
are 
are 
class="nv">$source</span><span 
class="nv">$source</span><span 
class="nv">$source</span><span 
class="nv">$source</span><span 
class="nv">$source</span><span 
class="nv">$source</span><span 
class="nv">$source</span><span 
previously 
rm 
class="nv">$source</span><span 
main 
what 
what 
id="goals">Goals</h3> 
class="nb">ls 
class="nb">ls 
</span> 
know 
</span>command0<span 
zero 
information 
</span>command0<span 
</span> 
</span> 
line. 
tests 
</span> 
</span> 
</span> 
class="highlight"><code> 
what 
class="nb">ls 
</span>back 
</span>back 
class="nb">ls 
</span> 
</span>back 
</span>back 
</span> 
tests 
</span>Allen 
</span>Allen 
</span> 
kyle.dotterrer.18@dartmouth.edu 
kyle.dotterrer.18@dartmouth.edu 
</span> 
</span> 
until 
</span>back 
</span> 
</span>back 
line. 
until 
line. 
arguments)</span> 
</span> 
</span>back 
what 
line. 
let’s 
what 
arguments)</span> 
information 
</span> 
</span> 
know 
</span> 
tries 
</span> 
what 
</span> 
</span> 
class="highlight"><code> 
$# 
$# 
class="nv">$*</span> 
</span> 
what 
information 
</span> 
./count.sh 
line. 
what 
</span> 
kyle.dotterrer.18@dartmouth.edu 
</span> 
kyle.dotterrer.18@dartmouth.edu 
kyle.dotterrer.18@dartmouth.edu 
</span> 
what 
</span> 
tries 
</span> 
what 
</span> 
what 
chains 
submitted 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
submitted 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
requested. 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
class="nv">$dest</span><span 
submitted 
page 
re-entering 
class="highlighter-rouge">rm</code>) 
being 
info 
mkdir 
class="highlighter-rouge">0</code>).</p> 
class="highlighter-rouge">0</code>).</p> 
class="k">else 
Just 
before 
mkdir 
mkdir 
mkdir 
Any 
class="highlighter-rouge">$(command)</code>; 
re-entering 
class="highlighter-rouge">/bin/bash 
class="highlighter-rouge">cd</code> 
before 
identify 
class="k">else 
class="k">else 
before 
prime 
prime 
prime 
prime 
prime 
class="o">!=</span> 
prime 
before 
prime 
prime 
prime 
prime 
before 
before 
arithmetic!</h2> 
before 
mkdir 
prime 
prime 
prime 
prime 
class="o">!=</span> 
long 
used</span> 
class="k">else 
class="k">else 
class="k">else 
class="k">else 
class="k">else 
class="k">else 
my 
mean 
should 
<p>Here 
<p>Here 
exist? 
exist? 
should 
list:</p> 
<p>Here 
should 
should 
should 
href="/engs50/Examples/args.sh">args.sh</a>, 
should 
should 
<p>Here 
should 
should 
my 
fix 
my 
colors</span><span 
class="nv">juniors</span><span 
<p>Here 
p</code> 
support. 
should 
class="o">=</span>u 
class="o">=</span>u 
unlike 
students 
invalid 
(always 
directory 
directory 
students 
students 
students 
students 
students 
students 
students 
students 
students 
directory 
even 
joel.j.katticaran.ug@dartmouth.edu 
joel.j.katticaran.ug@dartmouth.edu 
even 
directory 
looks 
<p>First, 
even 
directory 
anything) 
another 
directory 
works 
even 
prefer 
directory 
delimited 
directory 
directory 
it.</li> 
works 
joel.j.katticaran.ug@dartmouth.edu 
joel.j.katticaran.ug@dartmouth.edu 
another 
even 
another 
directory 
directory 
even 
directory 
directory 
go-rwx 
class="nb">source 
directory 
directory 
again.</p> 
by 
by 
by 
by 
</span>mkdir 
Program</h3> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
by 
expected.</p> 
by 
by 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
</span>mkdir 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="nb">test</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
Option 
handle 
by 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
limited 
by 
class="o">&gt;</span> 
class="o">&gt;</span> 
class="o">&gt;</span> 
by 
by 
joel! 
by 
pain 
class="o">&gt;</span> 
prompt; 
by 
by 
by 
by 
by 
comments 
by 
by 
To 
class="o">&gt;</span> 
class="s2">"======================"</span> 
by 
gives 
numbers 
</span>askguess<span 
succeed 
by 
</span>mkdir 
class="o">&gt;</span> 
by 
Campbell, 
href="/engs50/50.png" 
user 
class="highlighter-rouge">ls</code>).</p> 
executes 
noticed 
class="highlighter-rouge">.bak</code> 
<em>contents 
class="highlighter-rouge">chmod 
this.</p> 
construct. 
user 
user 
user 
input.</span> 
user 
value.</span> 
class="nv">$prime</span> 
class="s2">"Wrong! 
user 
defined 
user 
user 
variables</h2> 
user 
user 
arg 
arg 
arg 
arg 
arg 
user 
<li>If 
place:</p> 
"$@"</span> 
saves 
saves 
class="p">[6]</span><span 
user 
kills 
user 
user 
input.</span> 
user 
user 
value.</span> 
class="nv">$prime</span> 
user 
class="nt">-lt</span> 
In 
[<a 
href="/engs50/Labs/">Labs</a>] 
[<a 
[<a 
[<a 
[<a 
allows 
allows 
In 
executed 
array 
allows 
allows 
value 
value 
value 
executed 
executed 
executed 
value 
value 
executed 
During 
allows 
class="highlighter-rouge">if</code> 
class="highlighter-rouge">if</code> 
class="highlighter-rouge">if</code> 
class="highlighter-rouge">if</code> 
class="nt">-r</span> 
greater 
filenames. 
In 
value 
value 
loops, 
class="highlighter-rouge">filename</code>. 
class="highlighter-rouge">if</code> 
<li>either 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
backup. 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
differ</span> 
class="c"># 
class="c"># 
class="nt">-r</span> 
substitution; 
allows 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
Finally, 
class="highlighter-rouge">if</code> 
given 
In 
class="c"># 
forget 
class="c"># 
class="c"># 
In 
class="highlighter-rouge">if</code> 
array 
substitution; 
array 
Finally, 
array 
class="o">=</span> 
class="c"># 
spaces.</span> 
class="c"># 
directory</em>, 
class="highlighter-rouge">print</code> 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
In 
class="c"># 
In 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
frequent 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
script.</span> 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
wants 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
class="c"># 
</span>directory 
class="nt">-r</span> 
class="s2">/"</span> 
class="s2">/"</span> 
<font 
</p> 
name="description" 
in 
"> 
in 
in 
in 
invoke 
task 
in 
repetitive 
in 
in 
in 
line 
confirms 
in 
in 
last 
line 
choice; 
line 
in 
exist 
exist 
exist 
exist 
exist 
line 
in 
in 
invoke 
lists 
lists 
in 
in 
in 
in 
in 
multi-line 
in 
in 
in 
in 
in 
in 
line 
line 
in 
line 
in 
in 
line 
discussed 
status.</p> 
last 
in 
line 
in 
class="highlighter-rouge">guess</code>. 
line 
in 
in 
in 
line 
</span>arguments 
in 
in 
in 
in 
in 
in 
in 
status.</p> 
id="finally">Finally</h2> 
give 
in 
<p>Don’t 
in 
in 
line 
off.</span> 
line 
line 
line 
line 
in 
line 
particular 
line 
line 
line 
in 
in 
class="p">[7]</span><span 
full 
in 
in 
last 
line 
class="s2">"a+b=</span><span 
in 
EXIT 
in 
EXIT 
in 
adds 
in 
in 
in 
in 
in 
files</span> 
exist 
in 
College</h2> 
last 
class="site-header"> 
But 
from 
<span 
resources/ 
<span 
id="exit-status---who-cares">Exit 
from 
from 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<p>Similarly, 
<span 
<span 
<span 
tiny 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
Some 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
from 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
so, 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
from 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
Some 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
Error: 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
token 
<span 
<span 
install 
reached 
launch 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
token 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="o">=</span>3 
<span 
<span 
class="s2">"</span><span 
<span 
class="o">=</span>3 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
created. 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
Some 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
See 
from 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
optional 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
from 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
class="s2">"</span><span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<span 
<em>scripts?</em> 
ways:</p> 
status 
messages 
status 
status 
status 
status 
prompt</em>, 
status 
status 
status 
actually 
status 
backup 
status 
backup 
backup 
backup 
backup 
leave 
backup 
backup.sh<span 
backup 
.c 
status 
$?</code> 
status 
status 
backup 
since 
backup 
backup-diff.sh 
.c 
backup 
diff 
perfect 
Variable 
class="highlighter-rouge">$0=myscript.sh</code>, 
cannot.</li> 
class="k">return</span> 
g</code> 
– 
hit 
hit 
(If 
hit 
; 
backup 
leave 
hit 
actually 
stops 
Submit 
right 
</span>6 
class="post-title">Introduction 
entering 
switches 
rmdir: 
conditional 
class="highlighter-rouge">then</code> 
class="highlighter-rouge">then</code> 
conditional 
preceding 
note 
conditional 
class="highlighter-rouge">then</code> 
class="highlighter-rouge">then</code> 
class="nv">$i</span>.bak 
nested 
up-arrow 
note 
class="s2">"good 
note 
Program 
note 
class="highlighter-rouge">then</code> 
A 
A 
class="nv">$0</span> 
arguments</h2> 
. 
forgot 
. 
note 
note 
class="p">[*]</span><span 
clarity 
high</span> 
Program 
note 
class="nv">$extension</span> 
'source' 
class="s2">"did 
class="nv">$extension</span> 
icon" 
scripting 
that?</p> 
Take 
thus, 
scripting 
students.bak 
students.bak 
kyle! 
that?</p> 
would 
thus, 
no 
very 
no 
see, 
no 
<p>Variables 
no 
would 
$PATH 
name 
would 
name 
name 
their 
name 
their 
would 
name 
no 
would 
arguments! 
very 
class="highlighter-rouge">~cs50/labs/submitx</code>. 
their 
their 
time 
commands.</p> 
own 
time 
directories, 
output.data 
output.data 
West 
West 
bad 
class="highlighter-rouge">ls</code>. 
copies.</p> 
<p><strong><a 
morning"</span> 
time 
own 
time 
filename. 
class="o">&gt;&gt;</span> 
class="o">&gt;&gt;</span> 
class="o">&gt;&gt;</span> 
class="o">&gt;&gt;</span> 
procedural 
sequences.</p> 
class="s2">"N=</span><span 
are: 
lab 
<html> 
<meta 
<meta 
<meta 
<meta 
used 
doing 
it 
it 
python) 
used 
new 
id="separating-groups-of-commands-using-">Separating 
it 
it 
April: 
it 
new 
used 
it 
it 
used 
it 
external 
it 
it 
used 
it 
it 
it 
it 
class="k">do</span> 
class="k">do</span> 
class="k">do</span> 
used 
contents 
later 
it 
it 
used 
used 
it 
it 
it 
it 
it 
used 
it 
it 
it 
errors 
on.</p> 
it 
used 
later 
contents 
it 
it 
it 
it 
it 
it 
it 
used 
it 
it 
it 
class="highlighter-rouge">ESC</code> 
it 
it 
later 
used 
blue 
later 
it 
used 
it 
used 
class="k">do</span> 
result</span> 
it 
later 
it 
used 
it 
it 
it 
it 
class="k">do</span> 
new 
quoted 
student 
directory;"</span> 
new 
<p>I 
class="language-bash 
class="language-bash 
based 
based 
class="language-bash 
based 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
naming 
class="language-bash 
class="language-bash 
class="language-bash 
LLC 
LLC 
class="language-bash 
class="language-bash 
sometimes, 
read 
class="language-bash 
class="language-bash 
</span>chmod 
malicious 
class="language-bash 
class="language-bash 
unchanged 
class="language-bash 
guess 
class="language-bash 
guess 
guess 
named 
class="language-bash 
Guess 
Guess 
Guess 
Guess 
class="language-bash 
class="language-bash 
class="language-bash 
id="checking-arguments">Checking 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="highlighter-rouge">${colors[0]}</code>. 
class="language-bash 
class="nb">grep</span> 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
class="language-bash 
guess 
guess 
fragile. 
Why 
class="language-bash 
assignment 
assignment 
</span>chmod 
unable 
</span>Failed! 
based 
<!DOCTYPE 
the 
<nav 
for 
the 
the 
today 
the 
the 
for 
for 
the 
the 
for 
the 
way, 
the 
the 
the 
for 
the 
the 
for 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
labs/lab1 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
for 
the 
the 
the 
the 
session 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
class="k">if</span> 
the 
the 
I’ve 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
class="k">if</span> 
the 
the 
class="k">if</span> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
I’ve 
the 
for 
the 
the 
string 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
for 
the 
for 
the 
for 
the 
for 
the 
for 
the 
the 
.</p> 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
across 
for 
the 
for 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
fourth 
the 
the 
the 
the 
messages</h2> 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
class="k">if</span> 
the 
the 
the 
the 
the 
the 
screen. 
the 
for 
for 
example:</p> 
the 
the 
the 
the 
the 
the 
bug. 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
variables, 
the 
the 
for 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
for 
class="highlighter-rouge">exit</code> 
the 
the 
the 
the 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
variables, 
the 
for 
the 
for 
the 
the 
the 
the 
the 
the 
the 
the 
class="k">if</span> 
class="k">if</span> 
class="k">if</span> 
class="k">if</span> 
class="k">if</span> 
the 
the 
for?</p> 
<ul> 
script</li> 
<ul> 
number 
commands. 
commands. 
class="highlighter-rouge">cp</code> 
commands. 
over 
over 
class="nv">$i</span> 
class="nv">$i</span> 
people!) 
<ul> 
commands. 
class="highlighter-rouge">cp</code> 
while 
number 
number 
number 
assignments</a>:</p> 
<ul> 
id="other-stuff">Other 
statements 
number 
violet<span 
class="o">=</span>1 
while 
effect 
number 
class="o">=</span>1 
familiar 
compiled 
Fri 
wish 
way 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
ask 
class="s2">"</span> 
class="s2">"</span> 
<p>So, 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
create 
class="s2">"</span> 
class="s2">"</span> 
class="highlighter-rouge">arg</code> 
class="s2">"</span> 
verifies 
class="o">}</span> 
class="s2">"</span> 
create 
class="s2">"</span> 
class="s2">"</span> 1 2 
create 
create 
<em>other 
class="s2">"</span> 
class="s2">"</span> 
create 
class="s2">"</span> 
class="s2">"</span> 
class="highlighter-rouge">mkdir 
create 
class="o">}</span> 
ask 
ask 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
class="s2">"</span> 
upon 
deeply 
few 
do. 
class="nv">$ 
public_html/ 
status</em>, 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
conjunction 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
several 
class="highlighter-rouge">students</code> 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
iteration 
class="nv">$ 
makefile 
class="nv">$ 
class="nv">$ 
makefile 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
case, 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
case, 
./backup.sh</code>. 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
~/public_html/examples]<span 
class="nv">$ 
~/public_html/examples]<span 
class="nv">$ 
~/public_html/examples]<span 
class="nv">$ 
~/public_html/examples]<span 
class="nv">$ 
</span>1 
text, 
class="nv">$ 
class="nv">$ 
backwards 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
scientists 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
operand 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
class="nv">$ 
case, 
case, 
</span>1 
</span>1 
</span>Copying 
<h1 
<li><em>shell 
files. 
clues 
class="highlighter-rouge">&amp;&amp;</code> 
<p>Note, 
nor 
queue.c.bak 
combination 
<em>Unix, 
date.</p> 
diffs 
username 
those 
<h1 
combination 
those 
class="highlighter-rouge">/tmp</code> 
files. 
part 
those 
those 
class="highlighter-rouge">&amp;&amp;</code> 
username 
those 
Programming</h1> 
syntax 
scripts</h2> 
file 
languages 
languages 
file 
file 
constructs</h2> 
file 
outcome 
languages 
readable 
syntax 
file 
file 
file 
file 
file 
file 
file 
lists</h2> 
file 
file 
file 
values 
extension 
case 
languages 
syntax 
file 
<p>Indeed, 
syntax 
readable 
file 
file 
file 
course 
<p>Indeed, 
file 
pathname 
file 
file 
file 
file 
pathname 
file 
file 
David 
David 
syntax 
id="repetition-the-while-command">Repetition: 
pathname 
class="nv">$@</span><span 
class="nv">$@</span><span 
class="nv">$@</span><span 
define 
syntax 
syntax 
file 
file 
syntax 
syntax 
file 
values 
syntax 
file 
file 
define 
file 
whole 
readable 
readable 
extension 
extension 
extension 
course 
which 
which 
which 
exits.</p> 
which 
indicating 
<p>Astute 
which 
ordinary 
directory<span 
list 
list 
list 
list 
which 
list 
pipeline 
list 
which 
class="highlighter-rouge">#</code> 
which 
which 
href="/engs50/Examples/backup.sh">backup.sh</a>.</p> 
list 
which 
checked 
checked 
class="highlighter-rouge">a</code> 
<p>This 
which 
list 
list 
list 
list 
class="highlighter-rouge">2</code>) 
instead, 
which 
class="highlighter-rouge">${colors[7]}</code> 
include 
<p>This 
(‘force’) 
class="highlighter-rouge">rm 
which 
which 
</span>They 
<li><em>interactive 
needed. 
class="highlight"><code><span 
provide 
class="highlight"><code><span 
Fool: 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
id="first-interactive-shell-program">First 
out 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="o">(</span>not 
command, 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
provide 
class="highlight"><code><span 
cause 
command, 
provide 
class="highlight"><code><span 
class="s1">'s/\..*/!/'</span> 
class="k">)</span><span 
class="highlight"><code><span 
commandline.</li> 
class="highlight"><code><span 
command, 
big 
class="highlight"><code><span 
author 
command, 
class="highlight"><code><span 
differences: 
class="highlight"><code><span 
class="highlighter-rouge">message</code>). 
strings 
class="highlight"><code><span 
command, 
class="highlight"><code><span 
provide 
class="highlight"><code><span 
$*'</span> 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
class="highlight"><code><span 
`else'</span> 
class="highlight"><code><span 
class="highlight"><code><span 
class="p">[1]</span><span 
class="highlight"><code><span 
class="k">)</span><span 
class="k">)</span><span 
class="p">[1]</span><span 
out 
class="highlight"><code><span 
class="highlight"><code><span 
class="nv">tmpfile</span><span 
class="highlight"><code><span 
class="nv">tmpfile</span><span 
class="s2">"rm 
complain 
class="highlight"><code><span 
class="s2">"rm 
class="highlight"><code><span 
class="highlight"><code><span 
src="/engs50/50.png" 
interactively 
built 
listing 
class="k">*</span> 
interactively 
explicitly 
remove 
remove 
remove 
returns 
consistent.) 
class="highlighter-rouge">else</code> 
class="highlighter-rouge">!</code>, 
class="highlighter-rouge">-f</code> 
School 
School 
interactively 
editor.</p> 
class="k">*</span> 
couple 
class="highlighter-rouge">ls</code> 
class="highlighter-rouge">ls</code> 
returns 
class="highlighter-rouge">${varname}</code> 
class="highlighter-rouge">$@</code> 
always, 
"$@"</code>.</p> 
class="highlighter-rouge">else</code> 
class="highlighter-rouge">${varname}</code> 
class="highlighter-rouge">${colors[1]}</code>. 
class="highlighter-rouge">-f</code> 
remove 
class="s2">"extension"</span> 
class="k">*</span> 
short, 
useful.</p> 
constructs 
fine 
short, 
unconditional 
sort.</p> 
constructs 
first:</p> 
means 
means 
means 
means 
class="highlighter-rouge">!</code> 
class="highlighter-rouge">!</code> 
last, 
means 
keyboard, 
up</span> 
href="/engs50/Examples/backup-diff.sh">backup-diff.sh</a></p> 
declared 
class="o">=</span><span 
class="highlighter-rouge">read</code> 
pauses 
parameters 
parameters 
parameters 
b 
means 
declared 
substitutes 
b 
everyone 
mess 
languages, 
reaches 
class="o">=</span><span 
lecture, 
examples</li> 
windows 
structure 
not 
<p>Let’s 
private/ 
labs/labs2 
not 
non-zero 
non-zero 
non-zero 
non-zero 
not 
not 
not 
class="o">[</span> 
class="o">[</span> 
files? 
not 
class="highlighter-rouge">$(&lt;filename)</code>, 
this:</p> 
not 
not 
not 
not 
class="o">[</span> 
non-zero 
not 
not 
not 
not 
not 
not 
class="o">[</span> 
class="highlighter-rouge">$1=a</code>, 
class="highlighter-rouge">$*</code> 
<p>Let’s 
difference 
structure 
not:</p> 
class="o">[</span> 
non-zero 
not 
not 
class="o">()</span> 
starting 
</span>debugPrint 
not 
not 
not 
class="o">)</span> 
not 
class="o">)</span> 
class="o">)</span> 
class="o">)</span> 
not 
header 
not 
not 
structure 
not 
not 
not 
guess.</span> 
class="o">()</span> 
class="o">[</span> 
within 
class="nv">dest</span><span 
class="o">[</span> 
not 
not 
not 
not 
not 
class="o">[</span> 
Bash 
</head> 
</nav> 
Bash 
advanced 
It 
repeatedly 
building 
has 
execution, 
command4 
</span>copy 
end 
has 
expected 
semicolons 
Script</h2> 
It 
It 
end 
‘execute’ 
‘execute’ 
has 
identical 
"</span> 
"</span> 
It 
has 
nearly 
has 
identical 
class="highlighter-rouge">$(&lt;filename)</code> 
class="k">$(</span><span 
expected 
great 
class="highlighter-rouge">$$</code>, 
class="highlighter-rouge">tmpfile</code> 
It 
"</span> 
rsync 
outstanding 
class="page-content"> 
class="post"> 
related 
clear 
<em>exit 
any 
already 
writing 
any 
any 
command.</p> 
any 
writing 
pipeline. 
errors. 
command.</p> 
writeable? 
any 
entered 
x</code>, 
comments. 
modify 
class="nv">prime</span><span 
writing 
ID 
You 
writing 
any 
class="nv">prime</span><span 
once</span> 
You 
any 
Engs 
learn 
learn 
learn 
executing 
calling 
class="highlighter-rouge">||</code>) 
input 
learn 
type 
it, 
class="c">#!/bin/bash</span> 
comment 
comment 
notice, 
type 
class="c">#!/bin/bash</span> 
class="c">#!/bin/bash</span> 
status: 
class="c">#!/bin/bash</span> 
File: 
class="k">while</span> 
input 
removes 
.. 
class="c">#!/bin/bash</span> 
input 
input 
it, 
Notice 
class="c">#!/bin/bash</span> 
throughout 
Notice 
class="c">#!/bin/bash</span> 
File: 
guessprime.sh)</span> 
class="k">while</span> 
nothing 
learn 
class="c">#!/bin/bash</span> 
class="nv">$0</span><span 
Check 
initial-scale=1"> 
but 
class="p">;</span> 
class="p">;</span> 
web@ 
whether 
</span>whoops! 
class="p">;</span> 
but 
‘something 
class="p">;</span> 
whether 
above 
echo 
above 
but 
whether 
semicolon:</p> 
class="p">;</span> 
up’ 
</span>hash.c 
</span>hash.c 
class="nb">cat 
class="p">;</span> 
class="p">;</span> 
class="highlighter-rouge">for</code>.</p> 
class="p">;</span> 
class="p">;</span> 
produce 
class="highlighter-rouge">for</code>.</p> 
but 
class="nb">cat 
but 
but 
but 
class="p">;</span> 
but 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
class="p">;</span> 
but 
whether 
class="p">;</span> 
echo 
class="p">;</span> 
but 
cooler, 
class="nb">cat 
class="p">[3]</span><span 
above 
above 
high] 
class="p">;</span> 
shell, 
</span>Ensuring 
Balkcom. 
& 
this 
this 
this 
series 
commands; 
series 
execute 
this 
class="highlighter-rouge">if...then</code>) 
<em>interpreted</em> 
ziplab1.sh<span 
this 
programs, 
April 
execute 
both 
then 
execute 
class="highlighter-rouge">command1</code> 
execute 
then 
execute 
was 
both 
this 
queue.c 
queue.c 
queue.c 
queue.c 
then 
execute 
this 
Thomas! 
this 
then 
execute 
queue.c 
queue.c 
this 
this 
this 
this 
execute 
this 
execute 
execute 
this 
April 
this 
this 
this 
series 
between 1 -100 
between 1 -100 
between 1 -100 
between 1 -100 
between 1 -100 
between 1 -100 
between 1 -100 
between 1 -100 
class="highlighter-rouge">$3</code>. 
both 
this 
‘not 
then 
exits 
this 
class="highlighter-rouge">debugPrint</code> 
then 
was 
between 
this 
was 
then 
then 
this 
between 1 -100 
between 
this 
this 
this 
script; 
this 
this 
this 
class="o">[[</span> 
class="o">[[</span> 
class="o">[[</span> 
class="o">[[</span> 
class="o">[[</span> 
class="o">[[</span> 
class="o">[[</span> 
was 
width=48 
use 
environments, 
date<span 
use 
disjunction 
(or) 
use 
use 
class="nt">-e</span> 
readable? 
use 
use 
use 
use 
use 
use 
use 
class="o">=</span>5 
use 
search 
single 
single 
use 
use 
'echo' 
</span>./ziplab1.sh 
began, 
class="highlighter-rouge">foo.sh~</code>. 
use 
class="nv">a</span><span 
use 
use 
use 
use 
literally 
</span>4 
systems. 
simply 
successful 
class="k">then 
successful 
class="k">then 
simply 
‘true’ 
simply 
defensive, 
newlines 
see 
see 
see 
stdout. 
class="k">then 
class="k">then 
class="highlighter-rouge">do</code> 
class="highlighter-rouge">do</code> 
see 
equivalent 
see 
class="k">then 
equivalent 
equivalent 
simply 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
class="k">then 
am 
</html> 
<article 
already. 
control-flow 
(<code 
(<code 
listing<span 
complains 
Commands 
(<code 
(<code 
per 
</span>i 
</span>i 
</span>i 
statement, 
</span>i 
latter 
</span>i 
class="k">done</span> 
</span>i 
class="k">done</span> 
mean? 
Indeed, 
improve 
current 
</span>i 
improve 
current 
current 
</span>i 
(<code 
$USER 
current 
current 
(<code 
(<code 
algorithm 
(<code 
sensitive 
class="nv">$a</span><span 
temporary 
current 
temporary 
temporary 
temporary 
temporary 
temporary 
temporary 
without 
$USER 
on 
store 
on 
basic 
class="err">$</span> 
basic 
on 
on 
if, 
on 
class="err">$</span> 
on 
on 
on 
<p>To 
on 
on 
on 
class="k">$(</span>&lt;LFlist<span 
on 
store 
on 
class="err">$</span> 
fed 
on 
on 
on 
on 
on 
Kotz, 
Kotz, 
arrays</h2> 
class="k">${</span><span 
This 
on 
on 
on 
class="highlighter-rouge"><div 
on 
on 
immaterial 
class="highlighter-rouge">1&gt;&amp;2</code>, 
add 
on 
on 
on 
strokes 
on 
on 
problem.</p> 
class="k">${</span><span 
class="k">${</span><span 
class="k">${</span><span 
class="k">$(</span>&lt;LFlist<span 
class="k">${</span><span 
juniors</span><span 
class="k">${</span><span 
class="k">${</span><span 
on 
class="highlighter-rouge">rm</code> 
add 
This 
on 
on 
<p>To 
on 
on 
class="nv">$lab</span> 
class="nv">$lab</span> 
class="nv">$lab</span> 
This 
Kotz, 
on 
we 
scripts. 
cumbersome 
also 
scripts. 
also 
we 
mistake 
also 
terminated 
we 
we 
we 
we 
we 
we 
we 
scripts. 
we 
we 
subdirectories 
we 
we 
false 
we 
decide 
I 
languages:</p> 
I 
we 
I 
test</code>.</p> 
<p>Many 
perform 
turn. 
we 
perform 
we 
we 
we 
we 
also 
we 
we 
we 
we 
we 
we 
we 
security 
we 
we 
class="nv">$message</span> 
we 
we 
we 
scripts. 
we 
also 
I 
I 
brought 
I 
we 
<p>Many 
interrupted 
operation.</p> 
we 
I 
I 
we 
submit 
ensure 
submit 
</span>cannot 
class="s2">/"</span><span 
chgrp 
chgrp 
I 
Engs50 
using 
these 
(such 
C, 
tasks.</p> 
these 
groups 
using 
using 
highlighter-rouge"><div 
using 
adjust 
error. 
highlighter-rouge"><div 
want 
want 
highlighter-rouge"><div 
class="sb">`</span>labs<span 
succeeds 
using 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
want 
using 
want 
highlighter-rouge"><div 
highlighter-rouge"><div 
using 
highlighter-rouge"><div 
highlighter-rouge"><div 
bytes 
class="nt">-x</span> 
just 
highlighter-rouge"><div 
highlighter-rouge"><div 
want 
just 
highlighter-rouge"><div 
class="s2">"East 
highlighter-rouge"><div 
highlighter-rouge"><div 
using 
highlighter-rouge"><div 
want 
go 
highlighter-rouge"><div 
treated 
just 
highlighter-rouge"><div 
using 
go 
highlighter-rouge"><div 
highlighter-rouge"><div 
times 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
using 
go 
using 
highlighter-rouge"><div 
just 
highlighter-rouge"><div 
highlighter-rouge"><div 
go 
using 
Now 
carefully 
highlighter-rouge"><div 
highlighter-rouge"><div 
highlighter-rouge"><div 
.18. 
highlighter-rouge"><div 
highlighter-rouge"><div 
works. 
highlighter-rouge"><div 
kinds 
highlighter-rouge"><div 
idea 
highlighter-rouge"><div 
treated 
just 
just 
carefully 
instantiations, 
highlighter-rouge"><div 
class="nt">-x</span> 
</span>Marking 
these 
maintainable, 
/> 
a 
is 
a 
a 
a 
is 
a 
is 
a 
a 
is 
a 
a 
python, 
is 
a 
is 
a 
is 
is 
is 
a 
a 
a 
a 
is 
a 
is 
is 
people! 
is 
is 
class="highlighter-rouge">0</code>, 
is 
a 
is 
a 
a 
is 
is 
is 
is 
is 
a 
is 
a 
a 
is 
<p>Rewritten 
is 
a 
is 
a 
is 
is 
a 
a 
a 
a 
is 
a 
class="highlighter-rouge">i</code> 
is 
a 
is 
a 
a 
is 
is 
is 
is 
is 
is 
is 
is 
a 
</span>LFlist 
a 
a 
a 
John! 
a 
is 
is 
is 
a 
is 
a 
a 
a 
a 
a 
a 
a 
a 
is 
a 
a 
is 
a 
is 
a 
is 
is 
is 
a 
a 
is 
a 
a 
is 
program, 
a 
class="highlighter-rouge">0</code>, 
is 
a 
is 
is 
is 
a 
a 
changed 
a 
a 
a 
is 
is 
a 
is 
is 
a 
is 
a 
a 
is 
a 
is 
a 
a 
a 
a 
a 
a 
a 
input, 
a 
a 
a 
a 
a 
$HOME 
a 
a 
$@ 
a 
a 
a 
a 
is 
is 
is 
a 
is 
a 
is 
a 
a 
a 
a 
a 
a 
a 
is 
a 
a 
a 
foo.sh~ 
is 
is 
a 
is 
is 
is 
</span>LFlist 
a 
is 
is 
class="nv">$c</span><span 
class="nv">$c</span><span 
is 
a 
a 
is 
is 
a 
is 
a 
a 
a 
a 
a 
is 
a 
is 
a 
is 
a 
a 
a 
is 
a 
is 
a 
a 
a 
is 
a 
a 
a 
a 
a 
a 
solutions 
a 
a 
a 
a 
is 
is 
is 
is 
is 
is 
is 
class="o">]]</span> 
class="o">]]</span> 
class="o">]]</span> 
class="o">]]</span> 
class="o">]]</span> 
a 
is 
class="o">]]</span> 
is 
a 
class="o">]]</span> 
is 
changed 
is 
http-equiv="X-UA-Compatible" 
id="class-scripts">Class 
preserved 
class="s1">': 
second 
second 
second 
actions 
class="highlighter-rouge">echo 
files, 
differences; 
Usage: 
class="highlighter-rouge">ESC 
counting 
files, 
guessprime 
second 
deleted.)</span> 
</span>good. 
</span>good. 
</span>good. 
files, 
submission 
<p> 
<div 
<div 
<div 
<div 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
correct 
<div 
<div 
<div 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
<div 
class="nb">echo</span> 
<div 
<div 
<div 
<ol> 
<div 
don’t 
<div 
move 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
href="activity.html">Classroom 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
<div 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
</span>./args.sh 
<div 
<div 
<div 
<div 
class="highlighter-rouge">emacs</code> 
class="highlighter-rouge">emacs</code> 
class="highlighter-rouge">emacs</code> 
<div 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
id 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
id 
<div 
<div 
class="nb">echo</span> 
effectively 
<div 
[1..9].</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
class="nb">echo</span> 
<div 
Zhou, 
large, 
class="post-content"> 
shell 
shell 
shell 
shell 
</ul> 
shell 
shell 
be 
We 
shell 
</ul> 
shell 
shell 
shell 
shell 
shell 
shell 
shell 
jobs.</p> 
shell 
be 
shell 
shell 
shell 
shell 
shell 
shell 
status?</p> 
be 
shell 
failed 
be 
failed 
be 
be 
be 
shell 
shell 
shell 
shell 
readers 
be 
failed 
be 
We 
We 
failed 
failed 
failed 
be 
shell 
class="k">done 
be 
class="k">done 
We 
class="k">done 
class="k">done 
shell 
shell 
shell 
<em>output 
class="k">done 
backup.sh 
backup.sh 
shell 
line,</li> 
</ul> 
backup.sh 
backup.sh 
backup.sh 
be 
be 
shell 
risk. 
be 
We 
backup.sh 
none</span> 
class="k">done 
be 
be 
shell 
be 
none</span> 
class="k">done 
be 
be 
be 
be 
class="k">done 
branch, 
shell 
We 
shell 
shell 
be 
class="k">done 
class="k">done 
class="k">done 
class="k">done 
be 
be 
</ul> 
class="highlighter-rouge">printf</code> 
... 
... 
class="k">else</span><span 
class="highlighter-rouge">g</code>. 
be 
shell 
files.</p> 
indigo 
be 
... 
be 
class="k">done 
id="catching-interrupts-cleaning-up">Catching 
intermediate 
follows:</p> 
shell 
(whether 
be 
shell 
be 
be 
be 
be 
class="k">done 
class="nt">-ld</span> 
class="o">=</span>~/cs50/labs/<span 
class="nt">-ld</span> 
href="/engs50/Examples/">Examples</a>] 
class="wrapper"> 
<h3 
<h3 
scripts 
quickly 
fairly 
scripts 
scripts 
utilities; 
fairly 
knowledge 
scripts 
<h3 
Interactive 
scripts 
<h3 
id="the-test-aka---command">The 
around 
class="k">*</span>.c 
class="k">*</span>.c 
class="s2">.bak"</span> 
scripts 
scripts 
scripts 
class="k">*</span>.c 
class="s2">.bak"</span> 
class="k">*</span>.c 
class="s2">.bak"</span> 
could 
class="k">*</span>.c 
class="s2">.bak"</span> 
scripts 
could 
id="another-shell-script">Another 
<p>See 
class="k">*</span>.c 
class="s2">.bak"</span> 
class="s2">.bak"</span> 
class="s2">.bak"</span> 
could 
</span>./guessprime.sh 
$1, 
scripts 
around 
script.</p> 
scripts 
$$</span> 
script.</p> 
scripts 
class="highlighter-rouge">ctrl-C</code> 
$$</span> 
use:</p> 
scripts 
scripts 
[extension]</span> 
class="s2"> 
class="s2"> 
class="s2"> 
class="wrapper"> 
start 
Apr 1 8 
come 
positive) 
decision-making 
specific 
handy 
(b) 
delineate 
</span>emacs 
Apr 3 15 
start 
must 
catch 
</span>cmp 
activity</a>:</strong> 
enters 
come 
redirecting 
index 
must 
class="o">=</span>a+b 
class="s2">=</span><span 
consistency 
catch 
catch 
class="nv">$tmpfile</span><span 
override 
enters 
Ask 
CS50.</span> 
must 
class="nb">let</span> 
class="site-title" 
href="/engs50/Resources/">Resources</a>] 
write 
becomes 
write 
try 
class="k">if 
class="k">if 
try 
class="k">if 
class="k">if 
aka 
command</h3> 
class="k">if 
variable 
though, 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
write 
class="nv">$i</span><span 
<p>You 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
What 
spaces.</p> 
won’t 
confirmation 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
write 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
class="nv">$i</span><span 
variable 
variable 
try 
produced 
try 
try 
try 
variable 
try 
try 
variable 
<p>You 
write 
code 
<p>From 
code 
twice.) 
finally 
variable 
me 
class="nt">-bash</span>: 
variable 
interrupt 
interrupt 
<em>immediately</em> 
variable 
variable 
variable 
variable 
class="k">if 
class="k">if 
class="k">if 
with 
with 
when 
so 
conditions 
many 
many 
existing 
semicolon 
when 
incorrect 
many 
when 
many 
many 
many 
clause.</p> 
with 
many 
semicolon 
conditions 
existing 
with 
with 
Meaning 
so 
many 
typically 
class="k">for 
with 
class="k">for 
many 
class="k">for 
class="k">for 
class="k">for 
when 
class="k">for 
class="k">for 
example.</p> 
however, 
when 
when 
with 
when 
class="k">for 
with 
typically 
when 
when 
typically 
so 
with 
with 
class="k">for 
when 
typically 
message</span><span 
class="highlighter-rouge">${message}</code> 
class="highlighter-rouge">$message</code>.</p> 
when 
many 
semicolon 
As 
with 
when 
many 
class="highlighter-rouge">myscript.sh 
with 
class="k">for 
class="k">for 
class="k">for 
class="k">for 
with 
class="k">for 
class="k">for 
class="k">for 
class="nv">$@</span> 
class="k">for 
output 
incorrect 
with 
so 
class="k">for 
near 
semicolon 
when 
find 
when 
foo.sh 
typically 
class="nv">colors</span><span 
class="nv">colors</span><span 
class="nv">colors</span><span 
with 
class="highlighter-rouge">${message}</code> 
with 
with 
class="o">=</span>2 
class="nv">c</span><span 
with 
so 
output 
class="k">for 
so 
class="nv">$tmpdir</span> 
class="nv">$tmpdir</span> 
with 
so 
All 
example.</p> 
when 
many 
with 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
class="se">\</span> 
<strong>2018-10-10</strong> 
</a> 
week’s 
constructs</li> 
have 
looking 
have 
run 
have 
outcome.</p> 
have 
back 
back 
back 
back 
C.</p> 
have 
have 
have 
back 
back 
back 
:28 
back 
back 
back 
have 
have 
class="highlighter-rouge">backup.sh</code>.</p> 
have 
run 
it; 
run 
general 
defines 
have 
have 
class="highlighter-rouge">$#=3</code>, 
four 
four 
id="printing-error-messages">Printing 
week’s 
run 
Then, 
looking 
changed,</p> 
general 
subsitution 
class="nv">$b</span><span 
run 
have 
defines 
class="highlighter-rouge">askguess</code>. 
have 
class="o">=</span>~cs50/labs/submissions/<span 
readable:"</span> 
or 
or 
or 
<p>Like 
or 
or 
or 
reuse 
or 
or 
commands, 
failure 
access 
such 
or 
access 
such 
or 
or 
failure 
or 
</span></code></pre></div></div> 
class="k">fi</span> 
or 
</blockquote> 
class="k">fi</span> 
commands, 
or 
</span>cp 
failed! 
or 
class="highlighter-rouge">echo</code> 
failed! 
class="k">fi</span> 
or 
comes 
</blockquote> 
or 
or 
class="k">fi</span> 
class="k">fi</span> 
class="k">fi</span> 
or 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
such 
or 
or 
</blockquote> 
</blockquote> 
Write 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
~/example]<span 
class="nt">-rwxr-xr-x</span> 
cs50 
cs50 
~/example]<span 
~/example]<span 
</blockquote> 
or 
‘while-do’ 
or 
class="highlighter-rouge">echo</code> 
</blockquote> 
stderr’.</p> 
class="k">fi</span> 
or 
or 
or 
class="highlighter-rouge">echo</code> 
or 
<p>Like 
let 
let 
or 
such 
such 
or 
<p>Like 
most 
or 
cs50 
class="k">fi</span> 
</span>Checking 
or 
or 
</span>Checking 
cs50 
or 
cs50 
html> 
cares?</h2> 
each 
true 
true 
‘one-command’ 
each 
each 
each 
each 
John.P.Kotz.19@dartmouth.edu 
John.P.Kotz.19@dartmouth.edu 
further, 
exactly 
<p>It 
each 
<p>It 
each 
class="nv">$a</span> 
each 
exactly 
class="highlighter-rouge">then</code>… 
implicitly 
John.P.Kotz.19@dartmouth.edu 
John.P.Kotz.19@dartmouth.edu 
arithmetic 
class="nv">$a</span> 
</span>lpr 
error, 
error, 
class="nv">$dest</span>/EXTENSION 
class="nv">$dest</span>/EXTENSION 
class="nv">$?</span> 
class="nb">ls</span>: 
class="nb">ls</span>: 
class="nv">$?</span> 
need 
three 
then, 
need 
class="nv">$?</span> 
class="nv">$?</span> 
escape 
need 
need 
need 
need 
best 
best 
best 
best 
best 
best 
best 
best 
class="k">)</span> 
need 
class="highlighter-rouge"><span 
class="highlighter-rouge"><span 
class="highlighter-rouge"><span 
backed 
practice 
cases; 
variable; 
three 
then, 
three 
three 
three 
three 
three 
need 
stdout 
stdout 
stdout 
three 
clarify 
class="highlighter-rouge">~/.emacs</code>, 
need 
need 
cases; 
substitution 
practice 
typing 
class="highlighter-rouge">$tmpfile</code> 
need 
guess. 
~/cs50/labs/labN, 
[extension] 
class="nv">$usage</span><span 
class="nv">$usage</span><span 
class="nv">$usage</span><span 
content="IE=edge"> 
understandable 
operations 
~]$ 
<em>what</em> 
<em>secondary 
switch 
provided 
or</li> 
</ol> 
characters 
permission, 
switch 
arguments... 
./ziplab1.sh: 
unexpected 
./ziplab1.sh: 
class="highlighter-rouge">let</code> 
class="highlighter-rouge">let</code> 
operations 
<link 
<link 
<link 
following 
interactive 
interactive 
reads 
interactive 
class="highlighter-rouge">cd</code>, 
shown 
</span>April 
</span>April 
</span>rmdir 
fact 
interactive 
interactive 
interactive 
interactive 
class="highlighter-rouge">;</code>) 
following 
class="nt">-s</span> 
following 
(Again, 
<em>words</em> 
<li>make 
reads 
reads 
displayed 
maintains 
following 
impress.</li> 
mention 
references 
class="k">function 
lfs</span><span 
class="nt">-p</span> 
class="k">function 
‘global’ 
lines 
class="nt">-p</span> 
Professors 
program 
control 
<p>Shell 
<p>When 
program 
wrong, 
allowing 
provides 
program 
That’s 
commonly 
class="highlighter-rouge">$i</code> 
house! 
house! 
house! 
house! 
house! 
house! 
house! 
house! 
Thomas.D.Kim.19@dartmouth.edu 
Thomas.D.Kim.19@dartmouth.edu 
class="highlighter-rouge">for</code> 
<p>For 
class="highlighter-rouge">/bin/ls</code>… 
trouble 
a</span><span 
href="/engs50/Examples/guessprime.sh">guessprime.sh</a> 
</span>guess 
</span>guess 
class="s2">"and 
<p>When 
program 
stuff 
<p>When 
Thomas.D.Kim.19@dartmouth.edu 
Thomas.D.Kim.19@dartmouth.edu 
others 
</span>guess 
happens 
class="nt">-rf</span> 
Palmer, 
indebted 
different 
different 
unsuccessfully 
class="highlighter-rouge">0</code> 
class="highlighter-rouge">0</code> 
class="highlighter-rouge">0</code> 
class="highlighter-rouge">0</code> 
<p>Entering 
keyboard 
class="highlighter-rouge">0</code> 
East 
formats 
| 
<p>Up 
fi 
found.</p> 
class="k">}</span> 
<p>Above 
‘for-loop’ 
Status 
different 
class="highlighter-rouge">~cs50/.emacs</code> 
class="k">}</span> 
class="k">}</span> 
class="k">}</span> 
<p>Above 
class="k">}</span> 
class="k">}</span> 
class="k">}</span> 
keyboard 
Status 
result.</span> 
fi 
fi 
g+rwx 
g+rwx 
class="site-nav"> 
href="/engs50/Notes/">Notes</a>] 
and</li> 
sequence 
class="nb">echo 
class="nb">echo 
success 
below 
class="nb">echo 
directory.</p> 
class="highlighter-rouge">command2</code> 
success 
sequence 
class="nb">echo 
sequence 
class="nb">echo 
success 
class="nb">echo 
success 
below 
class="nb">echo 
class="nb">echo 
class="nb">echo 
sequence 
class="nb">echo 
argument 
class="nb">echo 
loop. 
class="nb">echo 
class="nb">echo 
class="nb">echo 
and</li> 
class="nb">echo 
Typically, 
class="nb">echo 
name(s) 
class="nb">echo 
class="o">=</span>31 
class="nb">echo 
class="nb">echo 
class="nb">echo 
argument 
argument 
class="nb">echo 
push 
class="nb">echo 
argument 
</span>debugPrint<span 
debugPrint 
sequence 
Typically, 
class="o">=</span>31 
sequence 
break 
class="nb">echo 
class="nb">echo 
</span>Submitting 
</span>3 
class="nb">echo 
class="nb">echo 
class="nb">echo 
</span>3 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
class="nb">echo 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
right.</p> 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
that 
that 
(In 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
issued 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
interjections!</p> 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
generated 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
nestable.</p> 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
<p>Second, 
that 
class="highlighter-rouge">PATH</code> 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
that 
prime, 
class="nt">-n</span> 
class="nt">-n</span> 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
Description 
home 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
(In 
, 
that 
pre-editing 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
that 
that 
that 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
class="o">[</span>cs50@flume 
that 
conventional 
that 
extend 
that 
that 
defining 
that 
notably, 
prime, 
class="nt">-n</span> 
that 
defining 
that 
prompt 
that 
that 
~cs50/submit/labs/labN/username,</span> 
that 
that 
(In 
that 
that 
place?"</span> 
test 
like 
successfully 
requests 
like 
test 
test 
test 
important 
spaces 
like 
trevor.l.davis.18@dartmouth.edu 
trevor.l.davis.18@dartmouth.edu 
spaces 
like 
</span>backup.sh 
like 
important 
if</span> 
echo. 
style.</p> 
important 
retains 
important 
like 
trevor.l.davis.18@dartmouth.edu 
trevor.l.davis.18@dartmouth.edu 
trevor.l.davis.18@dartmouth.edu 
important 
class="nv">tmpdir</span><span 
like 
possible 
if</span> 
if</span> 
destination 
if</span> 
destination 
if</span> 
educators. 
than 
better 
Shell 
an 
Shell 
syntax, 
an 
an 
an 
an 
empty 
an 
an 
than 
an 
Shell 
an 
an 
an 
an 
it.</p> 
[ 
an 
recommend 
an 
an 
than 
sort.c.bak 
<p>As 
demonstrates 
Shell 
better 
<p>Simple! 
treating 
an 
used, 
directories 
an 
<p>As 
an 
an 
syntax, 
empty 
demonstrates 
than 
an 
an 
an 
it.</p> 
an 
an 
files... 
align=center 
programming 
today:</p> 
through 
programming 
systems 
programming 
warnings 
programming 
<p>More 
care, 
traditional 
‘x’ 
class="nb">exit 
meaningful 
class="nb">exit 
through 
programming 
class="nb">exit 
line; 
through 
class="nb">exit 
stderr 
stderr 
class="nb">exit 
print 
print 
through 
print 
class="highlighter-rouge">[*]</code> 
</span>a<span 
print 
print 
print 
class="nb">exit 
through 
id="functions">Functions</h2> 
programming 
class="nb">exit 
- 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="k">for</span> 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="nb">exit 
class="nb">exit 
- 
- 
scripts</li> 
id="interactive-mode-and-shell-scripts">Interactive 
some 
warns 
some 
some 
command. 
high-level 
command. 
command. 
class="nt">-d</span> 
class="nv">$house</span> 
file</em> 
loop 
fact, 
we’ve 
loop 
class="nv">$guess</span> 
introduces 
command. 
again 
again 
again 
some 
class="nv">$# 
loop 
class="nv">$# 
some 
again 
some 
some 
fill 
class="nv">$guess</span> 
class="highlighter-rouge">~cs50/labs/submit</code>, 
arguments</span> 
class="nv">$# 
class="nv">$# 
class="nv">$# 
class="nt">-d</span> 
class="nt">-d</span> 
now 
useful 
class="highlighter-rouge">for...do</code>). 
useful 
after 
convention 
after 
now 
sets 
earlier. 
variables 
useful 
variables 
after 
variables 
useful 
class="highlighter-rouge">$2=b</code>, 
variables 
echo</span> 
echo</span> 
echo</span> 
useful 
href="/engs50/Reading/#week-2">reading 
reference!</li> 
yellow 
class="highlighter-rouge">$(command)</code>:</p> 
array, 
work, 
writable 
after 
after 
<p>Sometimes 
askguess 
askguess 1 100 
askguess 1 100 
variables 
class="s1">'Failed: 
class="nv">g</span><span 
class="nv">g</span><span 
Dartmouth 
previous 
quote 
class="nt">-w</span> 
class="highlighter-rouge">for</code>:</p> 
class="highlighter-rouge">for</code>:</p> 
construct 
class="highlighter-rouge">$1</code>, 
class="highlighter-rouge">g</code> 
class="nv">$colors</span> 
a=a*10</span> 
class="nb">cd</span> 
[low, 
class="nv">$1</span><span 
class="highlighter-rouge">$1</code>, 
<p>Try 
class="highlighter-rouge">\</code> 
class="nv">usage</span><span 
class="nv">$1</span><span 
class="nb">source</span><span 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
<head> 
first 
tackle 
first 
about 
about 
get 
due 
returning 
first 
first 
(with 
i.e., 
first 
(with 
about 
get 
class="highlighter-rouge">$?</code>; 
next 
providing 
get 
about 
id="loops-for-lists">Loops 
it;</p> 
</span>house 
first 
(with 
about 
first 
first 
class="highlighter-rouge">ls</code>.) 
bad!</p> 
<p>Fourth, 
next 
tells 
debugging; 
get 
you’re 
first 
class="k">*</span><span 
ourself</span> 
due 
due 
first 
class="highlighter-rouge">exit 
class="nb">.</span> 
class="nb">.</span> 
<p><small>This 
<title>Introduction 
important, 
available 
scripts.</p> 
updated 
top 
There 
options 
shell.)</p> 
retrieve 
class="highlighter-rouge">bash</code> 
class="highlighter-rouge">bash</code> 
really 
output: 
viewed 
output: 
zero.</span> 
scripts.</p> 
needs 
There 
id="the-shells-variables">The 
available 
arguments; 
choice 
class="highlighter-rouge">bash</code> 
scripts.</p> 
subscript 
needs 
interrupts, 
cleaning 
interrupts, 
name, 
There 
guess, 
available 
class="nv">$USER</span> 
</span>5 
updated 
allow 
character 
</span>Directory 
</span>Directory 
class="highlighter-rouge">command0</code> 
technology 
class="highlighter-rouge">command0</code> 
class="k">then</span> 
character 
class="k">then</span> 
class="highlighter-rouge">command0</code> 
class="k">then</span> 
class="highlighter-rouge">command0</code> 
file.</p> 
class="k">then</span> 
class="k">then</span> 
class="k">then</span> 
argument) 
sort.c 
sort.c 
sort.c 
sort.c 
sort.c 
class="c">#!/bin/bash</span></code> 
sort.c 
class="c">#!/bin/bash</span></code> 
class="c">#!/bin/bash</span></code> 
called, 
local 
local 
class="nv">message</span><span 
do</code> 
defensive 
arg</code> 
defensive 
zero). 
defensive 
id="another-example-submitx">Another 
example; 
copied 
assignment.</span> 
Terminal 
<code 
<code 
<code 
up 
Archive/ 
<code 
integer 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
(and 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
test, 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
brackets 
<code 
<code 
<code 
<code 
up 
up 
up 
up 
<code 
<code 
<code 
up 
up 
up 
up 
<code 
<code 
<code 
<code 
line!</p> 
<code 
<code 
<code 
<code 
back-quotes, 
<code 
<code 
<code 
<code 
up 
up 
up 
up 
<code 
<code 
<code 
<code 
up 
up 
up 
up 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
try.</p> 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
up 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="s2">"Enter 
class="s2">"Enter 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
cs50-lab1.tgz 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
desiring 
<code 
<code 
<code 
<code 
<code 
<code 
class="nb">let 
class="nb">let 
class="nb">let 
class="nb">let 
class="nb">let 
<code 
<code 
<code 
up 
up 
<code 
<code 
<code 
up 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
<code 
class="s2">"Enter 
<code 
<code 
<code 
<code 
<code 
bash 
<code 
<code 
<code 
<code 
visible 
</span>success! 
</span>success! 
<img 
more 
more 
often 
understands 
copy 
copy 
copy 
more 
did 
condition 
more 
more 
more 
times.</p> 
copy 
more 
more 
more 
column 
file;</em> 
were 
copy 
usage: 
copy 
later, 
usage: 
$0 
$2, 
were 
were 
more 
more 
more 
more 
case. 
class="s1">' 
did 
copy 
id="arrays">Arrays</h2> 
class="o">=(</span>red 
copy 
yet 
more 
usage: 
range 
were 
usage: 
class="nv">$lab</span>/<span 
copy 
<footer 
process 
And 
scripts</h3> 
text 
text 
code, 
environment 
directory, 
text 
text 
x 
And 
backup</span> 
class="highlighter-rouge">prime</code> 
waits 
process 
"$@"'</span> 
process 
error; 
code, 
enlighten, 
<p>There’s 
process 
error; 
customized 
code, 
process 
process 
process 
directory, 
And 
And 
Lab 
class="s2">"usage: 
one 
shell’s 
<p>Error 
one 
] 
version 
one 
one 
one 
one 
one 
LFlist 
class="highlighter-rouge">PATH</code>, 
class="highlighter-rouge">PATH</code>, 
class="highlighter-rouge">PATH</code>, 
command-line 
class="highlighter-rouge">while 
shell’s 
command-line 
embedded 
one 
one 
one 
one 
one 
command-line 
error 
one 
error 
error 
error 
version 
one 
class="nb">let</span>: 
class="s2">+</span><span 
identifier, 
following:</p> 
command-line 
version 
href="https://engineering.dartmouth.edu/people/faculty/stephen-taylor/">Stephen 
name="viewport" 
discuss 
executable? 
hash.c.date 
hash.c.date 
Park 
(Notice 
placing 
process). 
</code> 
entire 
extension... 
content="width=device-width, 
alt="icon"> 
can 
file.</li> 
can 
can 
can 
(and) 
look 
can 
can 
can 
special 
can 
can 
class="highlighter-rouge">[ 
class="highlighter-rouge">[ 
class="highlighter-rouge">[ 
can 
class="highlighter-rouge">[ 
can 
invocation 
can 
can 
special 
can 
can 
trevor! 
can 
can 
special 
interprets 
can 
nice 
class="highlighter-rouge">$varname</code> 
already.</p> 
checks 
special 
can 
can 
tarball 
class="highlighter-rouge">$varname</code> 
can 
can 
nice 
class="highlighter-rouge">trap</code> 
can 
class="highlighter-rouge">trap</code> 
class="highlighter-rouge">trap</code> 
rf</code> 
can 
can 
checks 
</span>99 
Programming</title> 
<a 
<a 
goal 
simple 
<a 
<a 
reason 
well’ 
succeeded! 
succeeded! 
simple 
class="s2">"North 
simple 
simple 
file. 
<a 
<a 
id="variables-and-arrays">Variables 
simple 
looping 
<a 
$$ 
<a 
./args.sh 
arguments.</p> 
to’ 
class="nt">-ne</span> 
<a 
<a 
file. 
simple 
index.</p> 
class="nv">b</span><span 
reason 
<a 
low 
class="highlighter-rouge">guess</code> 
class="nv">$N</span> 
class="nv">$N</span> 
class="nv">$N</span> 
class="s1">'oops! 
<a 
</font> 
it’s 
script, 
something 
it’s 
exists; 
it’s 
extension. 
class="k">$(</span>sed 
denotes 
something 
something 
<p>If 
backup-diff.sh</span> 
differences 
script, 
difference.</p> 
class="nv">$arg</span><span 
class="nv">$arg</span><span 
class="nv">$arg</span><span 
class="nv">$arg</span><span 
more"</span> 
id="simple-debugging-tips">Simple 
class="nv">$arg</span><span 
<p>If 
differences 
<p>If 
it’s 
class="nv">$arg</span><span 
class="nv">$arg</span><span 
f 
errors, 
href="/engs50/Examples/guessprimefunction.sh">guessprimefunction.sh</a>:</p> 
it’s 
class="o">=</span>lab<span 
user... 
</article> 
Java, 
our 
complaints 
class="o">&amp;&amp;</span> 
id="conditional-execution-using-if-then-else">Conditional 
<blockquote> 
class="highlighter-rouge">command4</code> 
<blockquote> 
class="o">&amp;&amp;</span> 
class="highlighter-rouge">test</code> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="highlighter-rouge">test</code> 
our 
instantiated, 
our 
<blockquote> 
<blockquote> 
our 
our 
our 
our 
our 
<blockquote> 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
return 
return 
return 
our 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
class="c">#</span> 
class="highlighter-rouge">while</code> 
subtle 
<blockquote> 
class="o">=</span>10 
our 
our 
functions 
class="c">#</span> 
class="c">#</span> 
return 
class="c">#</span> 
class="c">#</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
class="o">&amp;&amp;</span> 
size=-1> 
</body> 
C 
script 
href="/engs50/Notes/bash3/script-mac.txt">Mac</a> 
script 
script 
C 
C 
<em>compiled</em>; 
parser 
sequences 
only 
only 
only 
only 
only 
only 
C 
only 
fails.</p> 
only 
fails.</p> 
only 
only 
C 
expansion) 
script 
script 
script 
script 
script 
(if 
script 
script 
script 
script 
script 
script 
script 
it</span> 
script 
script 
script 
script 
script 
class="highlighter-rouge">$#</code> 
$@'</span> 
script 
script 
script 
helpful 
class="highlighter-rouge">$message</code> 
error: 
script 
script 
script 
it</span> 
script 
script 
it</span> 
again</span> 
script 
only 
href="/engs50/Notes/bash3/"> 
<p>We 
<p>We 
These 
These 
id="conditional-sequences---basic-constructs">Conditional 
These 
<p>We 
determine 
‘back 
<p>We 
<p>We 
<p>We 
<p>We 
determine 
directory</span> 
<p>We 
continue 
never 
class="o">{</span> 
problem 
class="o">=</span>: 
class="o">(</span>error 
<p>We 
(variant 
class="o">{</span> 
runs 
homework 
runs 
class="nt">-eq</span> 
class="nt">-eq</span> 
directory</span> 
Prepare 
to 
to 
to 
to 
to 
to 
to 
However, 
to 
handful 
to 
to 
to 
(e.g., 
(e.g., 
to 
to 
to 
to 
to 
to 
to 
to 
(for 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
whereas 
to 
to 
to 
to 
to 
to 
to 
to 
to 
class="o">)</span>? 
However, 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
<li>add 
to 
<li>add 
to 
to 
to 
to 
to 
to 
to 
However, 
to 
to 
to 
to 
to 
to 
to 
to 
whereas 
to 
to 
to 
to 
to 
variable. 
to 
to 
to 
to 
variable. 
to 
to 
</span>arg 
</span>arg 
</span>arg 
</span>arg 
to 
</span>arg 
</span>arg 
</span>arg 
</span>arg 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
</span>arg<span 
to 
to 
to 
to 
to 
to 
whereas 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
</span>arg 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
to 
[1..9]</span> 
to 
to 
directory.'</span> 
to 
directory.'</span> 
to 
to 
to 
two 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
class="highlighter-rouge">&gt;</code> 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
command</em> 
of 
two 
of 
of 
of 
keyboard.</p> 
class="highlighter-rouge">backup.sh</code>:</p> 
of 
of 
of 
of 
of 
of 
class="highlighter-rouge">./backup.sh</code> 
of 
of 
of 
of 
of 
of 
two 
form 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
of 
two 
of 
two 
two 
two 
two 
two 
of 
of 
of 
of 
of 
of 
of 
two 
red 
form 
LFlist<span 
of 
id="let-me-do-arithmetic"><code 
of 
of 
of 
form 
of 
of 
of 
of 
problems, 
of 
of 
of 
of 
software 
The 
The 
may 
[cs50@flume 
isn’t 
always 
The 
wrong’, 
may 
had 
The 
names 
class="o">]</span> 
class="o">]</span> 
may 
names 
class="k">do 
class="k">do 
may 
class="k">do 
class="k">do 
The 
may 
class="k">do 
description 
The 
class="k">do 
class="o">]</span> 
The 
The 
The 
The 
program. 
may 
The 
class="k">do 
The 
always 
class="k">do 
class="k">do 
class="k">do 
class="k">do 
class="nv">$2</span><span 
class="k">do 
may 
may 
The 
</span>c 
class="s2">"="</span><span 
The 
The 
program. 
may 
The 
class="nv">$2</span><span 
The 
The 
class="nv">$2</span><span 
class="o">]</span> 
class="nv">$lab</span><span 
class="nv">$lab</span><span 
class="o">]</span> 
class="nt">-R</span> 
class="nt">-R</span> 
class="nt">-R</span> 
class="nt">-R</span> 
<header 
<header 
users 
example, 
<p>What 
example, 
example, 
(without 
example, 
(without 
its 
example, 
example, 
class="k">in</span> 
class="k">in</span> 
place 
class="k">in</span> 
class="k">in</span> 
example, 
class="k">in</span> 
</span>bash 
scripts, 
executable 
executable 
its 
class="k">in</span> 
its 
executable 
class="k">in</span> 
its 
example, 
versions 
class="k">in</span> 
shorthand 
guess</span> 
its 
example, 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
class="k">in</span> 
example, 
class="highlighter-rouge">1</code>), 
place 
edit 
key 
key 
example, 
edit 
example, 
edit 
arrays 
shorthand 
variables.</p> 
its 
place 
place 
place 
example, 
example, 
guess</span> 
class="o">==</span> 
</span>Requesting 
searchable 
href="/engs50/"> 
bash. 
<p>The 
<p>The 
<p>The 
indicate 
indicate 
<p>The 
<p>The 
<p>The 
<p>The 
<p>The 
<p>The 
seen 
<p>The 
(a) 
<p>The 
README 
README 
<p>Notice 
<p>Notice 
become 
<p>The 
Kaya! 
class="nb">cat</span> 
class="highlighter-rouge">/bin</code> 
<p>Notice 
class="nt">--quiet</span> 
backups 
<p>The 
<p>The 
<p>The 
<p>The 
<p>The 
class="highlighter-rouge">for 
class="highlighter-rouge">for 
<p>Notice 
noise 
<p>The 
When 
class="nv">lfs</span><span 
class="nv">lfs</span><span 
<p>The 
<p>The 
<p>The 
class="o">=</span>/tmp/print<span 
class="nb">cat</span> 
<p>The 
class="o">=</span>/tmp/print<span 
class="o">=</span>/tmp/print<span 
<p>Notice 
indicate 
class="nb">cat</span> 
(CS50) 
command 
command 
us 
command 
command 
command 
command 
class="o">||</span> 
command 
command 
command 
command 
might 
input) 
command 
command 
show 
us 
might 
command 
class="highlighter-rouge">then</code>, 
(interchangeably) 
command 
class="o">||</span> 
class="o">||</span> 
class="o">||</span> 
command 
command 
appending 
(as 
South 
South 
command 
command 
command 
say, 
might 
happen 
command 
command 
command 
might 
show 
command 
might 
might 
might 
command 
command 
command 
command 
command 
class="highlighter-rouge">"$@"</code> 
might 
command 
show 
class="sb">`</span><span 
command 
violet 
show 
command 
command 
command 
might 
might 
might 
command 
command 
command 
command 
might 
might 
might 
command 
command 
example: 
command 
command 
command 
class="o">||</span> 
class="o">||</span> 
class="o">||</span> 
(CS50) 
</footer> 
keep 
</code></pre></div></div> 
Fool 
Fool 
Fool 
</code></pre></div></div> 
</code></pre></div></div> 
uses 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
because 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
filenames 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
class="highlighter-rouge">`command`</code>, 
keep 
</code></pre></div></div> 
</code></pre></div></div> 
uses 
because 
</code></pre></div></div> 
stdin 
where 
</code></pre></div></div> 
</code></pre></div></div> 
Output: 
</code></pre></div></div> 
uses 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
because 
</code></pre></div></div> 
</code></pre></div></div> 
obscure 
comment-out 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
because 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
</code></pre></div></div> 
handy! 
</code></pre></div></div> 
Output: 
where 
</code></pre></div></div> 
where 
where 
where 
where 
where 
</code></pre></div></div> 
class="site-footer"> 
build 
rel="canonical" 
they 
<li>Writing 
<li>Writing 
enter 
enter 
commands 
commands 
commands 
commands 
commands 
other 
commands 
other 
commands 
commands 
other 
as 
other 
they 
itself.</p> 
prototyping 
commands 
build 
commands 
build 
commands 
commands 
as 
as 
as 
other 
other 
other 
commands 
</span>command1 
other 
commands 
commands 
</span>command1 
enter 
</span>0 
clause. 
as 
as 
other 
size 
commands 
accept 
commands 
commands 
time, 
as 
commands 
as 
other 
as 
commands 
surrounded 
and, 
commands 
commands 
commands 
class="nt">-l</span> 
as 
<p>Third, 
as 
input: 
</span>0 
as 
input: 
they 
</span>0 
they 
commands 
</span>0 
commands 
they 
as 
class="highlighter-rouge">$2</code>, 
</span>0 
as 
<li>They 
enter 
they 
commands 
as 
carries 
note, 
as 
build 
</span>0 
as 
as 
they 
class="s2">-</span><span 
</span>0 
as 
they 
class="highlighter-rouge">$2</code>, 
other 
as 
enter 
they 
other 
'dest'</span> 
as 
</span>0 
</span>0 
</div> 
</div> 
</div> 
</div> 
design 
mode 
been 
mode 
mode 
files 
whoops! 
else</h2> 
language 
commonly, 
files 
files 
files 
files 
tempting 
files 
little 
files 
March 
check 
check 
shell.</p> 
class="highlighter-rouge">echo</code>, 
debug 
element, 
files 
files 
files 
avoid 
pick, 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
class="nv">$tmpfile</span> 
recursively 
check 
check 
files 
check 
date 
date 
how 
reasons 
how 
primes 
careful 
class="highlighter-rouge">in</code>, 
occurs.</p> 
Wheelock 
</span>hello 
</span>hello 
how 
</span>hello 
</span>hello 
how 
file, 
</li> 
file, 
how 
file, 
how 
outside 
again"</span> 
how 
c</code>, 
<p>My 
</span>1&gt;&amp;2 
how 
normally 
</span>1&gt;&amp;2 
debugging 
debugging 
actual 
file, 
class="highlighter-rouge">colors</code>). 
how 
file, 
up</h2> 
guessprimefunction.sh 
outside 
</span>Removing 
class="nt">--delete</span> 
called 
do 
do 
programmers 
programmers 
do 
do 
do 
</span>command3 
class="k">else</span> 
backup/students 
class="k">else</span> 
filename 
backup/students 
backup/students 
backup/students 
class="highlighter-rouge">man 
filename 
old 
old 
old-fashioned 
do 
do 
called 
do 
class="nb">ls</span> 
things 
Then 
do 
class="highlighter-rouge">PATH</code>. 
things 
do 
called 
do 
compare 
compare 
morning 
morning 
do 
called 
class="nb">read 
class="nb">read 
href="/engs50/Resources/#bash">Resources</a> 
called 
wondering 
do 
do 
filename 
do 
flag 
causes 
exist.</p> 
class="nb">read 
called 
submitx</h2> 
things 
[1..9]"</span> 
class="nv">extension</span><span 
class="nb">ls</span> 
class="nb">ls</span> 
</header> 
</header> 
<p>Take 
mode</em>, 
set 
built-in 
same 
line, 
Park"</span> 
way.</p> 
So 
Let’s 
set 
: 
: 
: 
: 
: 
: 
nd 
same 
operator.</p> 
stuff</h1> 
enough 
making 
: 
: 
So 
unlikely 
file</span> 
follows, 
global 
set 
claim 
</span>2 
set 
<li>Understanding 
<li>Understanding 
recorded 
work 
class="highlighter-rouge">$?</code> 
if/else 
(no 
good 
(no 
good 
good 
good 
good 
enters; 
range.</span> 
class="highlighter-rouge">-n</code> 
arguments, 
arguments, 
arguments, 
arguments, 
arguments, 
good 
good 
turn 
off 
turn 
work 
orange 
orange 
<p>Even 
good 
good 
exits, 
good 
good 
enters; 
range.</span> 
rel="shortcut 
spaces) 
spaces) 
numbers; 
typed 
wherever 
Wheelock"</span> 
typed 
typed 
script</h2> 
guessprime.sh</span> 
the</span> 
passed 
correct. 
<li>Say 
variable, 
picking 
the</span> 
happen?</p> 
shell. 
programmer 
shell. 
class="highlight"><pre 
represented 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
yucks, 
class="highlight"><pre 
class="highlight"><pre 
Suppose 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
inside 
class="highlight"><pre 
inside 
class="highlight"><pre 
North 
class="highlight"><pre 
class="highlight"><pre 
sort<span 
shell. 
class="highlight"><pre 
<li>type 
class="highlighter-rouge">backup.sh</code>, 
class="highlight"><pre 
class="highlight"><pre 
backup.sh</span> 
intelligent, 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
running 
class="highlight"><pre 
space.</p> 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
statement 
class="highlighter-rouge">foo.sh</code> 
class="highlight"><pre 
class="highlight"><pre 
class="highlighter-rouge">$colors</code> 
class="highlighter-rouge">$colors</code> 
defined.</p> 
class="highlight"><pre 
class="highlight"><pre 
running 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
class="highlight"><pre 
N 
N 
N 
N 
N 
class="footer-heading">Engs50 
<strong>18:07</strong>.</small></p> 
(or 
interactively. 
rather, 
enables 
~]<span 
~]<span 
exit 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
exit 
exists.</p> 
example 
~]<span 
~]<span 
exit 
exit 
exit 
‘all 
is, 
~]<span 
~]<span 
exit 
exit 
example 
~]<span 
~]<span 
exit 
~]<span 
~]<span 
exit 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
(or 
hash.c 
hash.c 
~]<span 
~]<span 
~]<span 
~]<span 
hello 
hello 
hello 
hello 
hello 
~]<span 
example 
(or 
~]<span 
hello 
hello 
hello 
hello 
hello 
~]<span 
(or 
interactively. 
it. 
hash.c 
class="highlighter-rouge">chmod</code>), 
</span>./backup.sh 
hash.c 
If 
If 
If 
exit 
exit 
class="highlighter-rouge">.c</code> 
exit 
exit 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
class="s1">'for 
class="s1">'for 
class="s1">'for 
class="s1">'for 
<p>Study 
shorthand, 
Below, 
function 
processing 
~]<span 
~]<span 
is, 
If 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
(computer 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
~]<span 
a+b<span 
example 
function 
function 
function 
function 
~/cs50 
~/cs50 
~/cs50 
~/cs50 
~/cs50 
https://thayer.github.io/engs50/Notes/bash3/ 2 78188 
href="/engs50/Reading/#week-1">reading</a>; 
mainly 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
<p>Why 
labs 
labs 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
into 
into 
</span><span 
</span><span 
into 
</span><span 
</span><span 
</span><span 
class="highlighter-rouge">bash</code>. 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
into 
class="highlighter-rouge">$3=c</code>.</p> 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
equal 
</span><span 
</span><span 
<li>Comments 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
class="o">=(</span><span 
</span><span 
class="o">=(</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
part-way 
caused 
</span><span 
</span><span 
</span><span 
</span><span 
into 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
class="nv">lab</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
</span><span 
will 
will 
includes 
‘;’</h2> 
:58:08 
earlier 
earlier 
will 
(i.e., 
implies 
implies 
will 
sense 
invert 
earlier 
used. 
will 
class="k">in 
will 
ctrl-P) 
earlier 
arguably 
id="first-shell-script">First 
will 
will 
will 
class="o">]</span><span 
supposed 
class="o">]</span><span 
chitchat.</li> 
will 
includes 
clean 
clean 
includes 
will 
structured. 
class="o">]</span><span 
class="nt">-gt</span> 
class="nt">-gt</span> 
designed 
Taylor</a> 
programs) 
programs) 
configuring 
at 
<p>Commands 
perhaps 
at 
<p>There 
wrong.</p> 
at 
at 
at 
does 
does 
does 
does 
does 
does 
does 
supports 
doesn’t 
does 
at 
arguments 
arguments 
at 
at 
at 
<p>There 
does 
official 
does 
save 
arguments 
arguments 
arguments 
redirect 
arguments 
class.</p> 
tips</h2> 
arguments 
at 
<p>Every 
save 
id="temporary-files">Temporary 
at 
does 
arguments 
arguments 
forth. 
at 
does 
at 
does 
at 
charset="utf-8"> 
content="In 
reliable, 
Unix 
addition 
Unix 
sophisticated 
Unix 
Unix 
execution 
kept 
adjacent 
visual 
No 
No 
<p>Often 
For 
if 
if 
if 
if 
if 
execution 
if 
if 
true; 
Unix 
if 
if 
if 
triggered 
if 
</span>backup 
</span>backup 
</span>backup 
if 
if 
</span>backup 
</span>backup 
written 
</span>backup 
if 
Unix 
Kaya.M.Thomas.17@dartmouth.edu 
Kaya.M.Thomas.17@dartmouth.edu 
if 
should</p> 
Unix 
Unix 
if 
if 
if 
waysf</span> 
For 
Kaya.M.Thomas.17@dartmouth.edu 
Kaya.M.Thomas.17@dartmouth.edu 
For 
if 
if 
if 
if 
</span>any... 
class="nt">-aHv</span> 
you 
you 
href="/engs50/css/main.css"> 
href="/engs50/Reading/">Reading</a>] 
<h2 
you 
you 
you 
class="highlighter-rouge">grep</code>, 
found 
tasks 
<h2 
<h2 
cannot 
cannot 
<h2 
specifies 
<h2 
you 
class="o">!</span> 
stylistic 
you 
you 
you 
class="nt">-f</span> 
class="nt">-f</span> 
class="nt">-f</span> 
you 
you 
class="nt">-f</span> 
<h2 
space 
you 
<h2 
you 
you 
you 
you 
you 
you 
you 
<h2 
class="o">!</span> 
<h2 
<h2 
you 
usually 
<h2 
you 
<h2 
found 
<h2 
<h2 
you 
page.</p> 
you 
<h2 
you 
you 
found 
you 
you 
you 
you 
you 
you 
you 
<p>will 
<h2 
you 
you 
<h2 
<h2 
files</h2> 
class="nt">-f</span> 
<h2 
exiting. 
Very 
you 
<h2 
you 
<h2 
you 
"extension" 
class="o">!</span> 
you 
class="o">!</span> 
you 
class="o">!</span> 
class="o">!</span> 
<h2 
rel="stylesheet" 
<em>script</em> 
programs 
programs 
programs 
programs 
below:</p> 
EDT 
who 
made 
made 
Directory 
command2 
convey 
command2 
class="highlighter-rouge">command3</code> 
clause 
cp 
cp 
put 
]</code> 
]</code> 
cp 
cp 
cp 
]</code> 
cp 
cp 
you’ll 
put 
cp 
cp 
permissions 
cp 
made 
Heck 
put 
‘make 
<li>Don’t 
put 
put 
rf 
class="nv">$tmpdir</span><span 
Heck 
class="s2">: 
permissions 
put 
o-rwx 
o-rwx 
o-rwx 
<p>In 
your 
your 
href="/engs50/Notes/bash3/script-flume.txt">flume</a>.</p> 
<p>In 
missing 
inform 
append 
make 
<p>In 
make 
make 
<p>In 
situations 
confusing 
class="k">fi 
class="k">fi 
<p>In 
instead 
make 
hash.c.bak 
body 
substitute 
<p>In 
your 
instead 
instead 
make 
your 
your 
class="highlighter-rouge">./ls</code> 
instead 
make 
class="k">fi 
missing 
run. 
Description: 
newline 
them 
$* 
class="nv">$*</span><span 
class="nv">$*</span><span 
class="nv">$*</span><span 
inform 
confusing 
your 
realized 
substitute 
your 
your 
class="nb">trap</span> 
whenever 
whenever 
your 
class="nb">trap</span> 
make 
make 
Description: 
them 
your 
class="k">fi 
class="k">fi 
class="k">fi 
missing 
class="k">fi 
your 
your 
class="s2">"</span>... 
your 
class="k">fi 
class="k">fi 
class="s2">"</span>... 
make 
class="k">fi 
your 
class="k">fi 
and 
development 
and 
and 
and 
and 
and 
and 
scripts</em>, 
complex 
and 
and 
and 
and 
and 
and 
and 
complex 
and 
and 
and 
and 
and 
and 
and 
and 
class="highlighter-rouge">0</code>) 
and 
and 
and 
and 
and 
and 
easy 
and 
and 
and 
word 
examples.</p> 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
complex 
and 
and 
effect, 
and 
and 
class="highlighter-rouge">.</code> 
class="highlighter-rouge">.</code> 
class="highlighter-rouge">.</code> 
and 
class="highlighter-rouge">.</code> 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
empty!</span> 
Input: 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
and 
green 
and 
and 
and 
and 
class="nv">$$</span> 
and 
and 
and 
class="nv">$$</span> 
class="nv">$$</span> 
and 
and 
and 
and 
empty!</span> 
Input: 
and 
and 
$guess 
and 
and 
and 
and 
word 
and 
CS50 
and 
